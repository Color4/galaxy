{"version":3,"sources":["mvc/library/library-folderlist-view.js"],"names":["define","FolderListView","el","progress","folderContainer","mod_utils","sort","mod_library_model","events","mod_library_dataset_view","Backbone","View","extend","progressStep","include_deleted","show_page","click #select-all-checkboxes","click .dataset_row","click .folder_row","click .sort-folder-link","collection","defaults","page_count","initialize","options","this","fetchFolder","_","rowViews","Folder","renderOne","listenTo","rePaint","fetch","that","error","mod_toastr","response","responseJSON","onclick","FolderContainer","id","attributes","urlRoot","Galaxy","url","success","folder_container","template","render","model","err_msg","path","length","library_router","back","parent_library_id","upper_folder_id","libraries","templateFolder","$","paginate","metadata","full_path","total_items_count","ceil","items_to_render","order","items_shown","folderToolbarView","reset","dataset_id","row","renderAll","checkEmptiness","models","tooltip","css","postRender","fetched_metadata","Math","preferences","get","page_start","each","slice","contains_file_or_folder","set","find","removeAllRows","addAll","folderListView","add","sortColumnClicked","preventDefault","findWhere","type","sortFolder","configureElements","sort_by","rowView","mod_library_folderrow_view","FolderRowView","checked","after","removeOne","$el","filter","data","checkbox","source","target","makeWhiteRow","makeDarkRow","show","hide","$row","event","removeClass","addClass","renderSortIcon","sortByNameAsc","sortByNameDesc","selectAll","selected","closest","selectClickedRow","localName","join"],"mappings":"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","file":"../../../scripts/mvc/library/library-folderlist-view.js","sourcesContent":["define(\n    [\n        \"layout/masthead\",\n        \"utils/utils\",\n        \"libs/toastr\",\n        \"mvc/library/library-model\",\n        \"mvc/library/library-folderrow-view\",\n        \"mvc/library/library-dataset-view\"\n    ],\n    function(\n        mod_masthead,\n        mod_utils,\n        mod_toastr,\n        mod_library_model,\n        mod_library_folderrow_view,\n        mod_library_dataset_view\n    ) {\n        var FolderListView = Backbone.View.extend({\n            el: \"#folder_items_element\",\n            // progress percentage\n            progress: 0,\n            // progress rate per one item\n            progressStep: 1,\n\n            folderContainer: null,\n\n            sort: \"asc\",\n\n            events: {\n                \"click #select-all-checkboxes\": \"selectAll\",\n                \"click .dataset_row\": \"selectClickedRow\",\n                \"click .folder_row\": \"selectClickedRow\",\n                \"click .sort-folder-link\": \"sortColumnClicked\"\n            },\n\n            collection: null,\n\n            defaults: {\n                include_deleted: false,\n                page_count: null,\n                show_page: null\n            },\n\n            /**\n     * Initialize and fetch the folder from the server.\n     * @param  {object} options an object with options\n     */\n            initialize: function(options) {\n                this.options = _.defaults(\n                    this.options || {},\n                    this.defaults,\n                    options\n                );\n                this.modal = null;\n                // map of folder item ids to item views = cache\n                this.rowViews = {};\n\n                // create a collection of folder items for this view\n                this.collection = new mod_library_model.Folder();\n\n                // start to listen if someone modifies the collection\n                this.listenTo(this.collection, \"add\", this.renderOne);\n                this.listenTo(this.collection, \"remove\", this.removeOne);\n                this.listenTo(this.collection, \"sort\", this.rePaint);\n                this.listenTo(this.collection, \"reset\", this.rePaint);\n\n                this.fetchFolder();\n            },\n\n            fetchFolder: function(options) {\n                var options = options || {};\n                this.options.include_deleted = options.include_deleted;\n                var that = this;\n\n                this.folderContainer = new mod_library_model.FolderContainer({\n                    id: this.options.id\n                });\n                this.folderContainer.url =\n                    this.folderContainer.attributes.urlRoot +\n                    this.options.id +\n                    \"/contents\";\n\n                if (this.options.include_deleted) {\n                    this.folderContainer.url =\n                        this.folderContainer.url + \"?include_deleted=true\";\n                }\n                this.folderContainer.fetch({\n                    success: function(folder_container) {\n                        that.folder_container = folder_container;\n                        that.render();\n                    },\n                    error: function(model, response) {\n                        if (typeof response.responseJSON !== \"undefined\") {\n                            mod_toastr.error(\n                                response.responseJSON.err_msg +\n                                    \" Click this to go back.\",\n                                \"\",\n                                {\n                                    onclick: function() {\n                                        Galaxy.libraries.library_router.back();\n                                    }\n                                }\n                            );\n                        } else {\n                            mod_toastr.error(\n                                \"An error occurred. Click this to go back.\",\n                                \"\",\n                                {\n                                    onclick: function() {\n                                        Galaxy.libraries.library_router.back();\n                                    }\n                                }\n                            );\n                        }\n                    }\n                });\n            },\n\n            render: function(options) {\n                this.options = _.extend(this.options, options);\n                var template = this.templateFolder();\n                $(\".tooltip\").hide();\n\n                // find the upper id in the full path\n                var path = this.folderContainer.attributes.metadata.full_path;\n                var upper_folder_id;\n                if (path.length === 1) {\n                    // the library is above us\n                    upper_folder_id = 0;\n                } else {\n                    upper_folder_id = path[path.length - 2][0];\n                }\n\n                this.$el.html(\n                    template({\n                        path: this.folderContainer.attributes.metadata\n                            .full_path,\n                        parent_library_id: this.folderContainer.attributes\n                            .metadata.parent_library_id,\n                        id: this.options.id,\n                        upper_folder_id: upper_folder_id,\n                        order: this.sort\n                    })\n                );\n\n                // when dataset_id is present render its details too\n                if (this.options.dataset_id) {\n                    var row = _.findWhere(that.rowViews, {\n                        id: this.options.dataset_id\n                    });\n                    if (row) {\n                        row.showDatasetDetails();\n                    } else {\n                        mod_toastr.error(\n                            \"Requested dataset not found. Showing folder instead.\"\n                        );\n                    }\n                } else {\n                    if (\n                        this.options.show_page === null ||\n                        this.options.show_page < 1\n                    ) {\n                        this.options.show_page = 1;\n                    }\n                    this.paginate();\n                }\n                $(\"#center [data-toggle]\").tooltip();\n                $(\"#center\").css(\"overflow\", \"auto\");\n            },\n\n            paginate: function(options) {\n                this.options = _.extend(this.options, options);\n\n                if (\n                    this.options.show_page === null ||\n                    this.options.show_page < 1\n                ) {\n                    this.options.show_page = 1;\n                }\n                this.options.total_items_count = this.folder_container.get(\n                    \"folder\"\n                ).models.length;\n                this.options.page_count = Math.ceil(\n                    this.options.total_items_count /\n                        Galaxy.libraries.preferences.get(\"folder_page_size\")\n                );\n                var page_start =\n                    Galaxy.libraries.preferences.get(\"folder_page_size\") *\n                    (this.options.show_page - 1);\n                var items_to_render = null;\n                items_to_render = this.folder_container\n                    .get(\"folder\")\n                    .models.slice(\n                        page_start,\n                        page_start +\n                            Galaxy.libraries.preferences.get(\"folder_page_size\")\n                    );\n                this.options.items_shown = items_to_render.length;\n                // User requests page with no items\n                if (\n                    Galaxy.libraries.preferences.get(\"folder_page_size\") *\n                        this.options.show_page >\n                    this.options.total_items_count +\n                        Galaxy.libraries.preferences.get(\"folder_page_size\")\n                ) {\n                    items_to_render = [];\n                }\n                Galaxy.libraries.folderToolbarView.renderPaginator(\n                    this.options\n                );\n                this.collection.reset(items_to_render);\n            },\n\n            rePaint: function(options) {\n                this.options = _.extend(this.options, options);\n                this.removeAllRows();\n                this.renderAll();\n                this.checkEmptiness();\n            },\n\n            /**\n     * Adds all given models to the collection.\n     * @param {array of Item or FolderAsModel} array of models that should\n     *  be added to the view's collection.\n     */\n            addAll: function(models) {\n                _.each(models, function(model) {\n                    Galaxy.libraries.folderListView.collection.add(model, {\n                        sort: false\n                    });\n                });\n                $(\"#center [data-toggle]\").tooltip();\n                this.checkEmptiness();\n                this.postRender();\n            },\n\n            /**\n     * Call this after all models are added to the collection\n     * to ensure that the folder toolbar will show proper options\n     * and that event will be bound on all subviews.\n     */\n            postRender: function() {\n                var fetched_metadata = this.folderContainer.attributes.metadata;\n                fetched_metadata.contains_file_or_folder =\n                    typeof this.collection.findWhere({ type: \"file\" }) !==\n                        \"undefined\" ||\n                    typeof this.collection.findWhere({ type: \"folder\" }) !==\n                        \"undefined\";\n                Galaxy.libraries.folderToolbarView.configureElements(\n                    fetched_metadata\n                );\n            },\n\n            /**\n     * Iterates this view's collection and calls the render\n     * function for each. Also binds the hover behavior.\n     */\n            renderAll: function() {\n                var that = this;\n                _.each(this.collection.models.reverse(), function(model) {\n                    that.renderOne(model);\n                });\n                this.postRender();\n            },\n\n            /**\n     * Creates a view for the given model and adds it to the folder view.\n     * @param {Item or FolderAsModel} model of the view that will be rendered\n     */\n            renderOne: function(model) {\n                this.options.contains_file_or_folder = true;\n                //if (model.get('type') !== 'folder'){\n                // model.set('readable_size', this.size_to_string(model.get('file_size')));\n                //}\n                model.set(\"folder_id\", this.id);\n                var rowView = new mod_library_folderrow_view.FolderRowView({\n                    model: model\n                });\n\n                // save new rowView to cache\n                this.rowViews[model.get(\"id\")] = rowView;\n\n                this.$el.find(\"#first_folder_item\").after(rowView.el);\n            },\n\n            /**\n     * Remove the view of the given model from the DOM.\n     * @param {Item or FolderAsModel} model of the view that will be removed\n     */\n            removeOne: function(model) {\n                this.$el\n                    .find(\"tr\")\n                    .filter(function() {\n                        return (\n                            $(this).data(\"id\") &&\n                            $(this).data(\"id\") === model.id\n                        );\n                    })\n                    .remove();\n            },\n\n            /**\n     * Remove all dataset and folder row elements from the DOM.\n     */\n            removeAllRows: function() {\n                $(\".library-row\").remove();\n            },\n\n            /** Checks whether the list is empty and adds/removes the message */\n            checkEmptiness: function() {\n                if (\n                    this.$el.find(\".dataset_row\").length === 0 &&\n                    this.$el.find(\".folder_row\").length === 0\n                ) {\n                    this.$el.find(\".empty-folder-message\").show();\n                } else {\n                    this.$el.find(\".empty-folder-message\").hide();\n                }\n            },\n\n            /** User clicked the table heading = he wants to sort stuff */\n            sortColumnClicked: function(event) {\n                event.preventDefault();\n                if (this.sort === \"asc\") {\n                    this.sortFolder(\"name\", \"desc\");\n                    this.sort = \"desc\";\n                } else {\n                    this.sortFolder(\"name\", \"asc\");\n                    this.sort = \"asc\";\n                }\n                this.renderSortIcon();\n            },\n\n            /**\n     *  Sorts the underlying collection according to the parameters received.\n     *  Currently supports only sorting by name.\n     */\n            sortFolder: function(sort_by, order) {\n                // default to asc sort by name\n                if (sort_by === \"undefined\" && order === \"undefined\") {\n                    return this.collection.sortByNameAsc();\n                }\n                if (sort_by === \"name\") {\n                    if (order === \"asc\") {\n                        return this.collection.sortByNameAsc();\n                    } else if (order === \"desc\") {\n                        return this.collection.sortByNameDesc();\n                    }\n                }\n            },\n\n            /**\n     * User clicked the checkbox in the table heading\n     * @param  {context} event\n     */\n            selectAll: function(event) {\n                var selected = event.target.checked;\n                that = this;\n                // Iterate each checkbox\n                $(\":checkbox\", \"#folder_list_body\").each(function() {\n                    this.checked = selected;\n                    var $row = $(this).closest(\"tr\");\n                    // Change color of selected/unselected\n                    if (selected) {\n                        that.makeDarkRow($row);\n                    } else {\n                        that.makeWhiteRow($row);\n                    }\n                });\n            },\n\n            /**\n     * Check checkbox if user clicks on the whole row or\n     *  on the checkbox itself\n     */\n            selectClickedRow: function(event) {\n                var checkbox = \"\";\n                var $row;\n                var source;\n                $row = $(event.target).closest(\"tr\");\n                if (event.target.localName === \"input\") {\n                    checkbox = event.target;\n                    source = \"input\";\n                } else if (event.target.localName === \"td\") {\n                    checkbox = $row.find(\":checkbox\")[0];\n                    source = \"td\";\n                }\n                if (checkbox.checked) {\n                    if (source === \"td\") {\n                        checkbox.checked = \"\";\n                        this.makeWhiteRow($row);\n                    } else if (source === \"input\") {\n                        this.makeDarkRow($row);\n                    }\n                } else {\n                    if (source === \"td\") {\n                        checkbox.checked = \"selected\";\n                        this.makeDarkRow($row);\n                    } else if (source === \"input\") {\n                        this.makeWhiteRow($row);\n                    }\n                }\n            },\n\n            makeDarkRow: function($row) {\n                $row.removeClass(\"light\").addClass(\"dark\");\n                $row\n                    .find(\"a\")\n                    .removeClass(\"light\")\n                    .addClass(\"dark\");\n                $row\n                    .find(\".fa-file-o\")\n                    .removeClass(\"fa-file-o\")\n                    .addClass(\"fa-file\");\n                $row\n                    .find(\".fa-folder-o\")\n                    .removeClass(\"fa-folder-o\")\n                    .addClass(\"fa-folder\");\n            },\n\n            makeWhiteRow: function($row) {\n                $row.removeClass(\"dark\").addClass(\"light\");\n                $row\n                    .find(\"a\")\n                    .removeClass(\"dark\")\n                    .addClass(\"light\");\n                $row\n                    .find(\".fa-file\")\n                    .removeClass(\"fa-file\")\n                    .addClass(\"fa-file-o\");\n                $row\n                    .find(\".fa-folder\")\n                    .removeClass(\"fa-folder\")\n                    .addClass(\"fa-folder-o\");\n            },\n\n            renderSortIcon: function() {\n                if (this.sort === \"asc\") {\n                    $(\".sort-icon\")\n                        .removeClass(\"fa-sort-alpha-desc\")\n                        .addClass(\"fa-sort-alpha-asc\");\n                } else {\n                    $(\".sort-icon\")\n                        .removeClass(\"fa-sort-alpha-asc\")\n                        .addClass(\"fa-sort-alpha-desc\");\n                }\n            },\n\n            templateFolder: function() {\n                return _.template(\n                    [\n                        // BREADCRUMBS\n                        '<ol class=\"breadcrumb\">',\n                        '<li><a title=\"Return to the list of libraries\" href=\"#\">Libraries</a></li>',\n                        \"<% _.each(path, function(path_item) { %>\",\n                        \"<% if (path_item[0] != id) { %>\",\n                        '<li><a title=\"Return to this folder\" href=\"#/folders/<%- path_item[0] %>\"><%- path_item[1] %></a> </li> ',\n                        \"<% } else { %>\",\n                        '<li class=\"active\"><span title=\"You are in this folder\"><%- path_item[1] %></span></li>',\n                        \"<% } %>\",\n                        \"<% }); %>\",\n                        \"</ol>\",\n\n                        // FOLDER CONTENT\n                        '<table data-library-id=\"<%- parent_library_id  %>\" class=\"grid table table-condensed\">',\n                        \"<thead>\",\n                        '<th class=\"button_heading\"></th>',\n                        '<th style=\"text-align: center; width: 20px; \" title=\"Check to select all datasets\"><input id=\"select-all-checkboxes\" style=\"margin: 0;\" type=\"checkbox\"></th>',\n                        '<th><a class=\"sort-folder-link\" title=\"Click to reverse order\" href=\"#\">name</a> <span title=\"Sorted alphabetically\" class=\"sort-icon fa fa-sort-alpha-<%- order %>\"></span></th>',\n                        '<th style=\"width:25%;\">description</th>',\n                        '<th style=\"width:5%;\">data type</th>',\n                        '<th style=\"width:10%;\">size</th>',\n                        '<th style=\"width:160px;\">time updated (UTC)</th>',\n                        '<th style=\"width:10%;\"></th> ',\n                        \"</thead>\",\n                        '<tbody id=\"folder_list_body\">',\n                        '<tr id=\"first_folder_item\">',\n                        \"<td>\",\n                        '<a href=\"#<% if (upper_folder_id !== 0){ print(\"folders/\" + upper_folder_id)} %>\" title=\"Go to parent folder\" class=\"btn_open_folder btn btn-default btn-xs\">..<a>',\n                        \"</td>\",\n                        \"<td></td>\",\n                        \"<td></td>\",\n                        \"<td></td>\",\n                        \"<td></td>\",\n                        \"<td></td>\",\n                        \"<td></td>\",\n                        \"<td></td>\",\n                        \"</tr>\",\n                        \"</tbody>\",\n                        \"</table>\",\n                        '<div class=\"empty-folder-message\" style=\"display:none;\">',\n                        \"This folder is either empty or you do not have proper access permissions to see the contents. If you expected something to show up\",\n                        ' please consult the <a href=\"https://galaxyproject.org/data-libraries/#permissions\" target=\"_blank\">library security wikipage</a>',\n                        ' or visit the <a href=\"https://biostar.usegalaxy.org/\" target=\"_blank\">Galaxy support site</a>.',\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            }\n        });\n\n        return {\n            FolderListView: FolderListView\n        };\n    }\n);\n"]}