{"version":3,"sources":["mvc/library/library-model.js"],"names":["define","Library","Backbone","Model","extend","urlRoot","Galaxy","root","isVisible","show_deleted","this","Libraries","Collection","model","sort_key","sort_order","options","search","search_term","lowercase_term","toLowerCase","data","indexOf","getVisible","filters","item","filteredLibraries","sortByNameAsc","sortByNameDesc","comparator","libraryA","libraryB","get","sort","LibraryItem","Ldda","FolderAsModel","itemA","Folder","itemB","FolderContainer","obj","reset","type","folder_contents","folder_item","defaults","folder","id","HistoryItem","i","length","initialize","add","file_item","emit","error","Jstree","GalaxyHistories","GalaxyHistory","Item","HistoryContents"],"mappings":"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","file":"../../../scripts/mvc/library/library-model.js","sourcesContent":["define([], function() {\n    // ============================================================================\n    // LIBRARY RELATED MODELS\n\n    var Library = Backbone.Model.extend({\n        urlRoot: Galaxy.root + \"api/libraries/\",\n\n        /** based on show_deleted would this lib show in the list of lib's?\n       *  @param {Boolean} show_deleted are we including deleted libraries?\n       */\n        isVisible: function(show_deleted) {\n            var isVisible = true;\n            if (!show_deleted && this.get(\"deleted\")) {\n                isVisible = false;\n            }\n            return isVisible;\n        }\n    });\n\n    var Libraries = Backbone.Collection.extend({\n        urlRoot: Galaxy.root + \"api/libraries\",\n\n        model: Library,\n\n        sort_key: \"name\", // default\n\n        sort_order: null, // default\n\n        initialize: function(options) {\n            options = options || {};\n        },\n\n        search: function(search_term) {\n            /**\n         * Search the collection and return only the models that have\n         * the search term in their names.\n         * [the term to search]\n         * @type {string}\n         */\n            if (search_term == \"\") return this;\n            var lowercase_term = search_term.toLowerCase();\n            return this.filter(function(data) {\n                var lowercase_name = data.get(\"name\").toLowerCase();\n                return lowercase_name.indexOf(lowercase_term) !== -1;\n            });\n        },\n\n        /** Get every 'shown' library in this collection based on deleted filter\n       *  @param {Boolean} show_deleted are we including deleted libraries?\n       *  @returns array of library models\n       */\n        getVisible: function(show_deleted, filters) {\n            filters = filters || [];\n            var filteredLibraries = new Libraries(\n                this.filter(function(item) {\n                    return item.isVisible(show_deleted);\n                })\n            );\n\n            return filteredLibraries;\n        },\n\n        /** Sort collection by library name (ascending) and return the sorted\n       *  collection\n       */\n        sortByNameAsc: function() {\n            this.comparator = function(libraryA, libraryB) {\n                if (\n                    libraryA.get(\"name\").toLowerCase() >\n                    libraryB.get(\"name\").toLowerCase()\n                ) {\n                    return 1; // after\n                }\n                if (\n                    libraryB.get(\"name\").toLowerCase() >\n                    libraryA.get(\"name\").toLowerCase()\n                ) {\n                    return -1; // before\n                }\n                return 0; // equal\n            };\n            this.sort();\n            return this;\n        },\n\n        /** Sort collection by library name (descending) and return the sorted\n       *  collection\n       */\n        sortByNameDesc: function() {\n            this.comparator = function(libraryA, libraryB) {\n                if (\n                    libraryA.get(\"name\").toLowerCase() >\n                    libraryB.get(\"name\").toLowerCase()\n                ) {\n                    return -1; // before\n                }\n                if (\n                    libraryB.get(\"name\").toLowerCase() >\n                    libraryA.get(\"name\").toLowerCase()\n                ) {\n                    return 1; // after\n                }\n                return 0; // equal\n            };\n            this.sort();\n            return this;\n        }\n    });\n\n    // ============================================================================\n    // FOLDER RELATED MODELS\n\n    var LibraryItem = Backbone.Model.extend({});\n\n    var Ldda = LibraryItem.extend({\n        urlRoot: Galaxy.root + \"api/libraries/datasets/\"\n    });\n\n    var FolderAsModel = LibraryItem.extend({\n        urlRoot: Galaxy.root + \"api/folders/\"\n    });\n\n    var Folder = Backbone.Collection.extend({\n        model: LibraryItem,\n\n        /** Sort collection by item name (ascending) and return the sorted\n       *  collection. Folders go before datasets.\n       */\n        sortByNameAsc: function() {\n            this.comparator = function(itemA, itemB) {\n                if (itemA.get(\"type\") === itemB.get(\"type\")) {\n                    if (\n                        itemA.get(\"name\").toLowerCase() >\n                        itemB.get(\"name\").toLowerCase()\n                    ) {\n                        return 1; // after\n                    }\n                    if (\n                        itemB.get(\"name\").toLowerCase() >\n                        itemA.get(\"name\").toLowerCase()\n                    ) {\n                        return -1; // before\n                    }\n                    return 0; // equal\n                } else {\n                    if (itemA.get(\"type\") === \"folder\") {\n                        return -1; // folder is always before dataset\n                    } else {\n                        return 1;\n                    }\n                }\n            };\n            this.sort();\n            return this;\n        },\n\n        /** Sort collection by item name (descending) and return the sorted\n       *  collection. Folders go before datasets.\n       */\n        sortByNameDesc: function() {\n            this.comparator = function(itemA, itemB) {\n                if (itemA.get(\"type\") === itemB.get(\"type\")) {\n                    if (\n                        itemA.get(\"name\").toLowerCase() >\n                        itemB.get(\"name\").toLowerCase()\n                    ) {\n                        return -1; // after\n                    }\n                    if (\n                        itemB.get(\"name\").toLowerCase() >\n                        itemA.get(\"name\").toLowerCase()\n                    ) {\n                        return 1; // before\n                    }\n                    return 0; // equal\n                } else {\n                    if (itemA.get(\"type\") === \"folder\") {\n                        return -1; // folder is always before dataset\n                    } else {\n                        return 1;\n                    }\n                }\n            };\n            this.sort();\n            return this;\n        }\n    });\n\n    var FolderContainer = Backbone.Model.extend({\n        defaults: {\n            folder: new Folder(),\n            urlRoot: Galaxy.root + \"api/folders/\",\n            id: \"unknown\"\n        },\n        parse: function(obj) {\n            // empty the collection\n            this.get(\"folder\").reset();\n            // response is not a simple array, it contains metadata\n            // this will update the inner collection\n            for (var i = 0; i < obj.folder_contents.length; i++) {\n                if (obj.folder_contents[i].type === \"folder\") {\n                    var folder_item = new FolderAsModel(obj.folder_contents[i]);\n                    this.get(\"folder\").add(folder_item);\n                } else if (obj.folder_contents[i].type === \"file\") {\n                    var file_item = new Ldda(obj.folder_contents[i]);\n                    this.get(\"folder\").add(file_item);\n                } else {\n                    Galaxy.emit.error(\n                        \"Unknown folder item type encountered while parsing response.\"\n                    );\n                }\n            }\n            return obj;\n        }\n    });\n\n    // ============================================================================\n    // HISTORY RELATED MODELS\n    // TODO UNITE\n\n    var HistoryItem = Backbone.Model.extend({\n        urlRoot: Galaxy.root + \"api/histories/\"\n    });\n\n    var HistoryContents = Backbone.Collection.extend({\n        urlRoot: Galaxy.root + \"api/histories/\",\n        initialize: function(options) {\n            this.id = options.id;\n        },\n        url: function() {\n            return this.urlRoot + this.id + \"/contents\";\n        },\n        model: HistoryItem\n    });\n\n    var GalaxyHistory = Backbone.Model.extend({\n        urlRoot: Galaxy.root + \"api/histories/\"\n    });\n\n    var GalaxyHistories = Backbone.Collection.extend({\n        url: Galaxy.root + \"api/histories\",\n        model: GalaxyHistory\n    });\n\n    // ============================================================================\n    // JSTREE MODEL\n    /** Represents folder structure parsable by the jstree component.\n     *\n     */\n\n    var Jstree = Backbone.Model.extend({\n        urlRoot: Galaxy.root + \"api/remote_files\"\n    });\n\n    return {\n        Library: Library,\n        Libraries: Libraries,\n        Item: Ldda,\n        Ldda: Ldda,\n        FolderAsModel: FolderAsModel,\n        Folder: Folder,\n        FolderContainer: FolderContainer,\n        HistoryItem: HistoryItem,\n        HistoryContents: HistoryContents,\n        GalaxyHistory: GalaxyHistory,\n        GalaxyHistories: GalaxyHistories,\n        Jstree: Jstree\n    };\n});\n"]}