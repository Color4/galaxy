{"version":3,"sources":["mvc/library/library-foldertoolbar-view.js"],"names":["define","FolderToolbarView","el","events","mod_masthead","mod_utils","mod_toastr","mod_library_model","mod_select","Backbone","View","extend","can_add_library_item","chain_call_control","total_number","failed_number","click #include_deleted_datasets_chk","disabled_jstree_element","click .toolbtn-show-locinfo","click .page_size_prompt","defaults","contains_file_or_folder","select_genome","select_extension","list_extensions","auto","description","initialize","id","text","options","template_defaults","Galaxy","mutiple_add_dataset_options","this","fetchExtAndGenomes","render","_","toolbar_template","templateToolBar","renderPaginator","paginator_template","templatePaginator","show_page","is_admin","isAdmin","page_count","is_anonym","isAnonymous","items_shown","config","allow_library_path_paste","library_import_dir","configureElements","$","parseInt","hide","total_items_count","createFolderFromModal","preventDefault","show","self","template","user","modal","closing_events","$el","find","tooltip","validate_new_folder","folderDetails","event","folder","url_items","current_folder_id","templateNewFolderInModal","urlRoot","title","save","success","libraries","create_new_folder_event","serialize_new_folder","FolderAsModel","history","fragment","split","indexOf","length","url","set","type","folderListView","add","error","model","response","findCheckedRows","responseJSON","err_msg","that","buttons","Import","val","name","modalBulkImport","info","histories","GalaxyHistories","fetch","done","importAllIntoHistory","templateBulkImportInModal","disableButton","new_history_name","root","processImportToHistory","status","Close","enableButton","history_name","history_id","dataset_ids","row_id","datasets_to_import","library_dataset_id","historyItem","content","source","last_used_history_id","new_history","folder_ids","i","library_folder_id","initChainCallControl","action","each","updateProgress","closest","data","txt_representation","Math","round","push","HistoryItem","substring","processDownload","jQuery","inputs","addFilesFromHistoryModal","progressStep","progress","template_modal","templateAddFilesFromHistory","addAllDatasetsFromHistory","closing_callback","library_router","fetchAndDisplayHistoryContents","format","method","importFilesFromPathModal","param","pair","renderSelectBoxes","appendTo","submit","remove","datatypes","description_url","sort","body","unshift","models","Add","list_genomes","genomes","navigate","trigger","change","target","value","fail","templateImportPathModal","importFilesFromGalaxyFolderModal","get","renderJstree","key","extension","a","b","require","jstree","core","plugins","types","icon","file","to_posix_lines","bind","tag_using_filenames","dbkey","paths","trimmed","valid_paths","chainCallImportingFolders","preserve_dirs","Jstree","html","checkbox","three_state","err_code","warning","space_to_tab","importFromPathsClicked","selected_nodes","li_attr","is","link_data","selection_type","full_source","file_type","trim","history_contents","history_contents_template","templateAddingDatasetsProgressBar","folder_name","templateDeletingItemsProgressBar","checked_hdas","history_item_ids","templateImportIntoHistoryProgressBar","history_item_types","items_to_add","hid","item_type","folder_item","from_hdca_id","history_item_id","importFromJstreePath","all_nodes","get_selected","filter","node","state","disabled","chainCallImportingIntoHistory","popped_item","history_item_set","onclick","window","promise","when","undefined","full_path","HistoryContents","chainCallImportingUserdirFiles","templateHistoryContents","contents","reverse","post","chainCallAddingHdas","added_hdas","hdas_set","from_hda_id","Item","chainCallDeletingItems","item_to_delete","items_to_delete","pop","updated_item","item","location","checkIncludeDeleted","include_deleted","deleteSelectedItems","items_total","dataset","folder_page_size","Folder","join","templateLocInfoInModal","collection","templateBrowserModal","deleted_items","destroy","model_class","emit","checked","fetchFolder","$checkedValues","showLocInfo","library","libraryListView","parent_library_id","showLocInfoModal","Library","showImportModal","back","showPageSizePrompt","prompt","preferences"],"mappings":"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QACA,6CACA,UACA,uCACA,YACA,WACA,UACA,OACA,gBACA,sCACA,QACA,gDACA,OACA,uBACA,6CACA,QACA,UACA,6CACA,OACA,oBACA,0CACA,QACA,UACA,uDACA,OACA,mBACA,2GACA,QACA,UACA,OACA,cACA,oCACA,QACA,WACA,WACA,6CACA,UACA,sCACA,YACA,WACA,UACA,OACA,gBACA,sCACA,QACA,gDACA,OACA,uBACA,6CACA,QACA,UACA,OACA,cACA,6BACA,QACA,WACA,WACA,UACFwN,KAAK,MAIf3M,yBAA0B,WACtB,OAAOtC,EAAEyB,UAED,8BACA,SACA,wEACA,4EACA,UACA,UACFwN,KAAK,MAIftK,0BAA2B,WACvB,OAAO3E,EAAEyB,UAED,QACA,mCACA,mBACA,iHACA,8CACA,mGACA,YACA,YACA,SACA,mCACA,kBACA,4GACA,WACA,SACA,UACFwN,KAAK,MAIfjD,qCAAsC,WAClC,OAAOhM,EAAEyB,UAED,4BACA,2EACA,SACA,yBACA,gJACA,mDACA,SACA,UACFwN,KAAK,MAIftD,kCAAmC,WAC/B,OAAO3L,EAAEyB,UAED,4BACA,iFACA,SACA,yBACA,gJACA,mDACA,SACA,UACFwN,KAAK,MAIfpD,iCAAkC,WAC9B,OAAO7L,EAAEyB,UAED,4BACA,SACA,yBACA,gJACA,mDACA,SACA,UACFwN,KAAK,MAIfG,qBAAsB,WAClB,OAAOpP,EAAEyB,UAED,gCACA,0JACA,wLACA,mCACA,oFACA,yGACA,WACA,sFACA,uFACA,WACA,SACA,mCACA,kFACA,yFACA,+BACA,WACA,kCACA,mEACA,gCACA,WACA,kCACA,0FACA,gCACA,WACA,kCACA,yEACA,yBACA,WACA,SACA,qGACA,aACA,YACA,qGACA,eACA,YACA,SAEA,4BACA,SACA,SACA,kFACA,QACA,gFACA,4EACA,SACA,OACA,QACA,4CACA,oCACA,0FACA,WACA,SACA,UACFwN,KAAK,MAIfhG,wBAAyB,WACrB,OAAOjJ,EAAEyB,UAED,gCACA,+JACA,sCACA,kCACA,yFACA,+BACA,WACA,kCACA,mEACA,gCACA,WACA,OACA,kCACA,0FACA,gCACA,WACA,kCACA,yEACA,yBACA,WACA,SACA,uKACA,SACA,kFACA,QACA,gFACA,4EACA,SACA,QACA,4CACA,oCACA,0FACA,WACA,SACA,UACFwN,KAAK,MAIf7H,4BAA6B,WACzB,OAAOpH,EAAEyB,UAED,6BACA,QACA,gCACA,8EACA,8CACA,mGACA,YACA,YACA,SACA,QACA,sCACA,SACA,UACFwN,KAAK,MAIfvB,wBAAyB,WACrB,OAAO1N,EAAEyB,UAED,gDACA,QACA,6GACA,aACA,YACA,+GACA,eACA,YACA,SACA,OACA,OACA,0DACA,oDACA,iDACA,yDACA,kEACA,0CACA,+GACA,UACA,6CACA,wFACA,0HACA,WACA,QACA,iBACA,6FACA,2GACA,6CACA,kLACA,UACA,QACA,UACA,iGACA,+GACA,6CACA,wFACA,qGACA,WACA,QACA,UACA,UACA,YACA,SACFwN,KAAK,MAIf5O,kBAAmB,WACf,OAAOL,EAAEyB,UAED,wCACA,uCACA,gDACA,iGACA,wHACA,iBACA,iGACA,2GACA,UACA,iBACA,kHACA,wHACA,UACA,sBACA,0FACA,QACA,4CACA,2GACA,0HACA,iBACA,yHACA,2IACA,UACA,QACA,SACA,sBACA,8HACA,qBACA,OACA,0CACA,WACFwN,KAAK","file":"../../../scripts/mvc/library/library-foldertoolbar-view.js","sourcesContent":["define(\n    [\n        \"layout/masthead\",\n        \"utils/utils\",\n        \"libs/toastr\",\n        \"mvc/library/library-model\",\n        \"mvc/ui/ui-select\"\n    ],\n    function(\n        mod_masthead,\n        mod_utils,\n        mod_toastr,\n        mod_library_model,\n        mod_select\n    ) {\n        var FolderToolbarView = Backbone.View.extend({\n            el: \"#center\",\n\n            events: {\n                \"click #toolbtn_create_folder\": \"createFolderFromModal\",\n                \"click #toolbtn_bulk_import\": \"modalBulkImport\",\n                \"click #include_deleted_datasets_chk\": \"checkIncludeDeleted\",\n                \"click #toolbtn_bulk_delete\": \"deleteSelectedItems\",\n                \"click .toolbtn-show-locinfo\": \"showLocInfo\",\n                \"click .page_size_prompt\": \"showPageSizePrompt\"\n            },\n\n            defaults: {\n                can_add_library_item: false,\n                contains_file_or_folder: false,\n                chain_call_control: {\n                    total_number: 0,\n                    failed_number: 0\n                },\n                disabled_jstree_element: \"folders\"\n            },\n\n            modal: null,\n\n            // directory browsing object\n            jstree: null,\n\n            // user's histories\n            histories: null,\n\n            // genome select\n            select_genome: null,\n\n            // extension select\n            select_extension: null,\n\n            // extension types\n            list_extensions: [],\n\n            // datatype placeholder for extension auto-detection\n            auto: {\n                id: \"auto\",\n                text: \"Auto-detect\",\n                description:\n                    \"This system will try to detect the file type automatically.\" +\n                    \" If your file is not detected properly as one of the known formats,\" +\n                    \" it most likely means that it has some format problems (e.g., different\" +\n                    \" number of columns on different rows). You can still coerce the system\" +\n                    \" to set your data to the format you think it should be.\" +\n                    \" You can also upload compressed files, which will automatically be decompressed.\"\n            },\n\n            // genomes\n            list_genomes: [],\n\n            initialize: function(options) {\n                this.options = _.defaults(options || {}, this.defaults);\n                this.fetchExtAndGenomes();\n                this.render();\n            },\n\n            render: function(options) {\n                this.options = _.extend(this.options, options);\n                var toolbar_template = this.templateToolBar();\n                var template_defaults = {\n                    id: this.options.id,\n                    is_admin: false,\n                    is_anonym: true,\n                    mutiple_add_dataset_options: false\n                };\n                if (Galaxy.user) {\n                    template_defaults.is_admin = Galaxy.user.isAdmin();\n                    template_defaults.is_anonym = Galaxy.user.isAnonymous();\n                    if (\n                        Galaxy.config.user_library_import_dir !== null ||\n                        Galaxy.config.allow_library_path_paste !== false ||\n                        Galaxy.config.library_import_dir !== null\n                    ) {\n                        template_defaults.mutiple_add_dataset_options = true;\n                    }\n                }\n                this.$el.html(toolbar_template(template_defaults));\n            },\n\n            /**\n   * Called from FolderListView when needed.\n   * @param  {object} options common options\n   */\n            renderPaginator: function(options) {\n                this.options = _.extend(this.options, options);\n                var paginator_template = this.templatePaginator();\n                $(\"body\")\n                    .find(\".folder-paginator\")\n                    .html(\n                        paginator_template({\n                            id: this.options.id,\n                            show_page: parseInt(this.options.show_page),\n                            page_count: parseInt(this.options.page_count),\n                            total_items_count: this.options.total_items_count,\n                            items_shown: this.options.items_shown\n                        })\n                    );\n            },\n\n            configureElements: function(options) {\n                this.options = _.extend(this.options, options);\n\n                if (this.options.can_add_library_item === true) {\n                    $(\".add-library-items\").show();\n                } else {\n                    $(\".add-library-items\").hide();\n                }\n                if (this.options.contains_file_or_folder === true) {\n                    if (Galaxy.user) {\n                        if (!Galaxy.user.isAnonymous()) {\n                            $(\".logged-dataset-manipulation\").show();\n                            $(\".dataset-manipulation\").show();\n                        } else {\n                            $(\".dataset-manipulation\").show();\n                            $(\".logged-dataset-manipulation\").hide();\n                        }\n                    } else {\n                        $(\".logged-dataset-manipulation\").hide();\n                        $(\".dataset-manipulation\").hide();\n                    }\n                } else {\n                    $(\".logged-dataset-manipulation\").hide();\n                    $(\".dataset-manipulation\").hide();\n                }\n                this.$el.find(\"[data-toggle]\").tooltip();\n            },\n\n            // shows modal for creating folder\n            createFolderFromModal: function(event) {\n                event.preventDefault();\n                event.stopPropagation();\n\n                // create modal\n                var self = this;\n                var template = this.templateNewFolderInModal();\n                this.modal = Galaxy.modal;\n                this.modal.show({\n                    closing_events: true,\n                    title: \"Create New Folder\",\n                    body: template(),\n                    buttons: {\n                        Create: function() {\n                            self.create_new_folder_event();\n                        },\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            },\n\n            // create the new folder from modal\n            create_new_folder_event: function() {\n                var folderDetails = this.serialize_new_folder();\n                if (this.validate_new_folder(folderDetails)) {\n                    var folder = new mod_library_model.FolderAsModel();\n                    var url_items = Backbone.history.fragment.split(\"/\"),\n                        current_folder_id;\n                    if (url_items.indexOf(\"page\") > -1) {\n                        current_folder_id = url_items[url_items.length - 3];\n                    } else {\n                        current_folder_id = url_items[url_items.length - 1];\n                    }\n                    folder.url = folder.urlRoot + current_folder_id;\n\n                    folder.save(folderDetails, {\n                        success: function(folder) {\n                            Galaxy.modal.hide();\n                            mod_toastr.success(\"Folder created.\");\n                            folder.set({ type: \"folder\" });\n                            Galaxy.libraries.folderListView.collection.add(\n                                folder\n                            );\n                        },\n                        error: function(model, response) {\n                            Galaxy.modal.hide();\n                            if (typeof response.responseJSON !== \"undefined\") {\n                                mod_toastr.error(response.responseJSON.err_msg);\n                            } else {\n                                mod_toastr.error(\"An error occurred.\");\n                            }\n                        }\n                    });\n                } else {\n                    mod_toastr.error(\"Folder's name is missing.\");\n                }\n                return false;\n            },\n\n            // serialize data from the modal\n            serialize_new_folder: function() {\n                return {\n                    name: $(\"input[name='Name']\").val(),\n                    description: $(\"input[name='Description']\").val()\n                };\n            },\n\n            // validate new folder info\n            validate_new_folder: function(folderDetails) {\n                return folderDetails.name !== \"\";\n            },\n\n            // show bulk import modal\n            modalBulkImport: function() {\n                var $checkedValues = this.findCheckedRows();\n                if ($checkedValues.length === 0) {\n                    mod_toastr.info(\"You must select some datasets first.\");\n                } else {\n                    var that = this;\n                    this.histories = new mod_library_model.GalaxyHistories();\n                    this.histories\n                        .fetch()\n                        .done(function() {\n                            var template = that.templateBulkImportInModal();\n                            that.modal = Galaxy.modal;\n                            that.modal.show({\n                                closing_events: true,\n                                title: \"Import into History\",\n                                body: template({\n                                    histories: that.histories.models\n                                }),\n                                buttons: {\n                                    Import: function() {\n                                        that.importAllIntoHistory();\n                                    },\n                                    Close: function() {\n                                        Galaxy.modal.hide();\n                                    }\n                                }\n                            });\n                        })\n                        .fail(function(model, response) {\n                            if (typeof response.responseJSON !== \"undefined\") {\n                                mod_toastr.error(response.responseJSON.err_msg);\n                            } else {\n                                mod_toastr.error(\"An error occurred.\");\n                            }\n                        });\n                }\n            },\n\n            /**\n   * Import all selected datasets into history.\n   */\n            importAllIntoHistory: function() {\n                this.modal.disableButton(\"Import\");\n                var new_history_name = this.modal\n                    .$(\"input[name=history_name]\")\n                    .val();\n                var that = this;\n                if (new_history_name !== \"\") {\n                    $.post(Galaxy.root + \"api/histories\", {\n                        name: new_history_name\n                    })\n                        .done(function(new_history) {\n                            that.options.last_used_history_id = new_history.id;\n                            that.processImportToHistory(\n                                new_history.id,\n                                new_history.name\n                            );\n                        })\n                        .fail(function(xhr, status, error) {\n                            mod_toastr.error(\"An error occurred.\");\n                        })\n                        .always(function() {\n                            that.modal.enableButton(\"Import\");\n                        });\n                } else {\n                    var history_id = $(\n                        \"select[name=dataset_import_bulk] option:selected\"\n                    ).val();\n                    this.options.last_used_history_id = history_id;\n                    var history_name = $(\n                        \"select[name=dataset_import_bulk] option:selected\"\n                    ).text();\n                    this.processImportToHistory(history_id, history_name);\n                    this.modal.enableButton(\"Import\");\n                }\n            },\n\n            processImportToHistory: function(history_id, history_name) {\n                var dataset_ids = [];\n                var folder_ids = [];\n                this.findCheckedRows().each(function() {\n                    var row_id = $(this)\n                        .closest(\"tr\")\n                        .data(\"id\");\n                    if (row_id.substring(0, 1) == \"F\") {\n                        folder_ids.push(row_id);\n                    } else {\n                        dataset_ids.push(row_id);\n                    }\n                });\n                // prepare the dataset objects to be imported\n                var datasets_to_import = [];\n                for (var i = dataset_ids.length - 1; i >= 0; i--) {\n                    var library_dataset_id = dataset_ids[i];\n                    var historyItem = new mod_library_model.HistoryItem();\n                    historyItem.url =\n                        historyItem.urlRoot + history_id + \"/contents\";\n                    historyItem.content = library_dataset_id;\n                    historyItem.source = \"library\";\n                    datasets_to_import.push(historyItem);\n                }\n\n                // prepare the folder objects to be imported\n                var folders_to_import = [];\n                for (var i = folder_ids.length - 1; i >= 0; i--) {\n                    var library_folder_id = folder_ids[i];\n                    var historyItem = new mod_library_model.HistoryItem();\n                    historyItem.url =\n                        historyItem.urlRoot + history_id + \"/contents\";\n                    historyItem.content = library_folder_id;\n                    historyItem.source = \"library_folder\";\n                    datasets_to_import.push(historyItem);\n                }\n\n                this.initChainCallControl({\n                    length: datasets_to_import.length,\n                    action: \"to_history\",\n                    history_name: history_name\n                });\n                // set the used history as current so user will see the last one\n                // that he imported into in the history panel on the 'analysis' page\n                jQuery.getJSON(\n                    Galaxy.root + \"history/set_as_current?id=\" + history_id\n                );\n                this.chainCallImportingIntoHistory(\n                    datasets_to_import,\n                    history_name\n                );\n            },\n\n            /**\n   * Update the progress bar in modal window.\n   */\n            updateProgress: function() {\n                this.progress += this.progressStep;\n                $(\".progress-bar-import\").width(\n                    Math.round(this.progress) + \"%\"\n                );\n                var txt_representation =\n                    Math.round(this.progress) + \"% Complete\";\n                $(\".completion_span\").text(txt_representation);\n            },\n\n            /**\n   * download selected datasets\n   * @param  {str} folder_id id of the current folder\n   * @param  {str} format    requested archive format\n   */\n            download: function(folder_id, format) {\n                var dataset_ids = [];\n                var folder_ids = [];\n                this.findCheckedRows().each(function() {\n                    var row_id = $(this)\n                        .closest(\"tr\")\n                        .data(\"id\");\n                    if (row_id.substring(0, 1) == \"F\") {\n                        folder_ids.push(row_id);\n                    } else {\n                        dataset_ids.push(row_id);\n                    }\n                });\n                var url =\n                    Galaxy.root + \"api/libraries/datasets/download/\" + format;\n                var data = { ld_ids: dataset_ids, folder_ids: folder_ids };\n                this.processDownload(url, data, \"get\");\n            },\n\n            /**\n   * Create hidden form and submit it through POST\n   * to initialize the download.\n   * @param  {str} url    url to call\n   * @param  {obj} data   data to include in the request\n   * @param  {str} method method of the request\n   */\n            processDownload: function(url, data, method) {\n                if (url && data) {\n                    // data can be string of parameters or array/object\n                    data = typeof data === \"string\" ? data : $.param(data);\n                    // split params into form inputs\n                    var inputs = \"\";\n                    $.each(data.split(\"&\"), function() {\n                        var pair = this.split(\"=\");\n                        inputs +=\n                            '<input type=\"hidden\" name=\"' +\n                            pair[0] +\n                            '\" value=\"' +\n                            pair[1] +\n                            '\" />';\n                    });\n                    // send request\n                    $(\n                        '<form action=\"' +\n                            url +\n                            '\" method=\"' +\n                            (method || \"post\") +\n                            '\">' +\n                            inputs +\n                            \"</form>\"\n                    )\n                        .appendTo(\"body\")\n                        .submit()\n                        .remove();\n                    mod_toastr.info(\"Your download will begin soon.\");\n                } else {\n                    mod_toastr.error(\"An error occurred.\");\n                }\n            },\n\n            addFilesFromHistoryModal: function() {\n                this.histories = new mod_library_model.GalaxyHistories();\n                var self = this;\n                this.histories\n                    .fetch()\n                    .done(function() {\n                        self.modal = Galaxy.modal;\n                        var template_modal = self.templateAddFilesFromHistory();\n                        self.modal.show({\n                            closing_events: true,\n                            title: \"Adding datasets from your history\",\n                            body: template_modal({\n                                histories: self.histories.models\n                            }),\n                            buttons: {\n                                Add: function() {\n                                    self.addAllDatasetsFromHistory();\n                                },\n                                Close: function() {\n                                    Galaxy.modal.hide();\n                                }\n                            },\n                            closing_callback: function() {\n                                Galaxy.libraries.library_router.navigate(\n                                    \"folders/\" + self.id,\n                                    { trigger: true }\n                                );\n                            }\n                        });\n                        self.fetchAndDisplayHistoryContents(\n                            self.histories.models[0].id\n                        );\n                        $(\"#dataset_add_bulk\").change(function(event) {\n                            self.fetchAndDisplayHistoryContents(\n                                event.target.value\n                            );\n                        });\n                    })\n                    .fail(function(model, response) {\n                        if (typeof response.responseJSON !== \"undefined\") {\n                            mod_toastr.error(response.responseJSON.err_msg);\n                        } else {\n                            mod_toastr.error(\"An error occurred.\");\n                        }\n                    });\n            },\n\n            /**\n   * Create modal for importing from Galaxy path.\n   * This feature is admin-only.\n   */\n            importFilesFromPathModal: function() {\n                var that = this;\n                this.modal = Galaxy.modal;\n                var template_modal = this.templateImportPathModal();\n                this.modal.show({\n                    closing_events: true,\n                    title: \"Please enter paths to import\",\n                    body: template_modal({}),\n                    buttons: {\n                        Import: function() {\n                            that.importFromPathsClicked(that);\n                        },\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    },\n                    closing_callback: function() {\n                        //  TODO: should not trigger routes outside of the router\n                        Galaxy.libraries.library_router.navigate(\n                            \"folders/\" + that.id,\n                            { trigger: true }\n                        );\n                    }\n                });\n                this.renderSelectBoxes();\n            },\n\n            /**\n   * Request all extensions and genomes from Galaxy\n   * and save them sorted in arrays.\n   */\n            fetchExtAndGenomes: function() {\n                var that = this;\n                mod_utils.get({\n                    url: Galaxy.root + \"api/datatypes?extension_only=False\",\n                    success: function(datatypes) {\n                        that.list_extensions = [];\n                        for (var key in datatypes) {\n                            that.list_extensions.push({\n                                id: datatypes[key].extension,\n                                text: datatypes[key].extension,\n                                description: datatypes[key].description,\n                                description_url: datatypes[key].description_url\n                            });\n                        }\n                        that.list_extensions.sort(function(a, b) {\n                            return a.id > b.id ? 1 : a.id < b.id ? -1 : 0;\n                        });\n                        that.list_extensions.unshift(that.auto);\n                    },\n                    cache: true\n                });\n                mod_utils.get({\n                    url: Galaxy.root + \"api/genomes\",\n                    success: function(genomes) {\n                        that.list_genomes = [];\n                        for (var key in genomes) {\n                            that.list_genomes.push({\n                                id: genomes[key][1],\n                                text: genomes[key][0]\n                            });\n                        }\n                        that.list_genomes.sort(function(a, b) {\n                            return a.id > b.id ? 1 : a.id < b.id ? -1 : 0;\n                        });\n                    },\n                    cache: true\n                });\n            },\n\n            renderSelectBoxes: function() {\n                // This won't work properly unlesss we already have the data fetched.\n                // See this.fetchExtAndGenomes()\n                // TODO switch to common resources:\n                // https://trello.com/c/dIUE9YPl/1933-ui-common-resources-and-data-into-galaxy-object\n                var that = this;\n                this.select_genome = new mod_select.View({\n                    css: \"library-genome-select\",\n                    data: that.list_genomes,\n                    container: Galaxy.modal.$el.find(\"#library_genome_select\"),\n                    value: \"?\"\n                });\n                this.select_extension = new mod_select.View({\n                    css: \"library-extension-select\",\n                    data: that.list_extensions,\n                    container: Galaxy.modal.$el.find(\n                        \"#library_extension_select\"\n                    ),\n                    value: \"auto\"\n                });\n            },\n\n            /**\n   * Create modal for importing from given directory\n   * on Galaxy. Bind jQuery events.\n   */\n            importFilesFromGalaxyFolderModal: function(options) {\n                var that = this;\n                var template_modal = this.templateBrowserModal();\n                this.modal = Galaxy.modal;\n                this.modal.show({\n                    closing_events: true,\n                    title: \"Please select folders or files\",\n                    body: template_modal({}),\n                    buttons: {\n                        Import: function() {\n                            that.importFromJstreePath(that, options);\n                        },\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    },\n                    closing_callback: function() {\n                        //  TODO: should not trigger routes outside of the router\n                        Galaxy.libraries.library_router.navigate(\n                            \"folders/\" + that.id,\n                            { trigger: true }\n                        );\n                    }\n                });\n\n                $(\".libimport-select-all\").bind(\"click\", function() {\n                    $(\"#jstree_browser\").jstree(\"check_all\");\n                });\n                $(\".libimport-select-none\").bind(\"click\", function() {\n                    $(\"#jstree_browser\").jstree(\"uncheck_all\");\n                });\n\n                this.renderSelectBoxes();\n                options.disabled_jstree_element = \"folders\";\n                this.renderJstree(options);\n\n                $(\"input[type=radio]\").change(function(event) {\n                    if (event.target.value === \"jstree-disable-folders\") {\n                        options.disabled_jstree_element = \"folders\";\n                        that.renderJstree(options);\n                        $(\".jstree-folders-message\").hide();\n                        $(\".jstree-preserve-structure\").hide();\n                        $(\".jstree-files-message\").show();\n                    } else if (event.target.value === \"jstree-disable-files\") {\n                        $(\".jstree-files-message\").hide();\n                        $(\".jstree-folders-message\").show();\n                        $(\".jstree-preserve-structure\").show();\n                        options.disabled_jstree_element = \"files\";\n                        that.renderJstree(options);\n                    }\n                });\n            },\n\n            /**\n   * Fetch the contents of user directory on Galaxy\n   * and render jstree component based on received\n   * data.\n   * @param  {[type]} options [description]\n   */\n            renderJstree: function(options) {\n                var that = this;\n                this.options = _.extend(this.options, options);\n                var target = options.source || \"userdir\";\n                var disabled_jstree_element = this.options\n                    .disabled_jstree_element;\n                this.jstree = new mod_library_model.Jstree();\n                this.jstree.url =\n                    this.jstree.urlRoot +\n                    \"?target=\" +\n                    target +\n                    \"&format=jstree\" +\n                    \"&disable=\" +\n                    disabled_jstree_element;\n                this.jstree.fetch({\n                    success: function(model, response) {\n                        // This is to prevent double jquery load. I think. Carl is magician.\n                        define(\"jquery\", function() {\n                            return jQuery;\n                        });\n                        // Now we need jstree, time to lazy load it.\n                        require([\"libs/jquery/jstree\"], function(jstree) {\n                            $(\"#jstree_browser\").jstree(\"destroy\");\n                            $(\"#jstree_browser\").jstree({\n                                core: {\n                                    data: model\n                                },\n                                plugins: [\"types\", \"checkbox\"],\n                                types: {\n                                    folder: {\n                                        icon: \"jstree-folder\"\n                                    },\n                                    file: {\n                                        icon: \"jstree-file\"\n                                    }\n                                },\n                                checkbox: {\n                                    three_state: false\n                                }\n                            });\n                        });\n                    },\n                    error: function(model, response) {\n                        if (typeof response.responseJSON !== \"undefined\") {\n                            if (response.responseJSON.err_code === 404001) {\n                                mod_toastr.warning(\n                                    response.responseJSON.err_msg\n                                );\n                            } else {\n                                mod_toastr.error(response.responseJSON.err_msg);\n                            }\n                        } else {\n                            mod_toastr.error(\"An error occurred.\");\n                        }\n                    }\n                });\n            },\n\n            /**\n   * Take the paths from the textarea, split it, create\n   * a request queue and call a function that starts sending\n   * one by one to be imported on the server.\n   */\n            importFromPathsClicked: function() {\n                var preserve_dirs = this.modal.$el\n                    .find(\".preserve-checkbox\")\n                    .is(\":checked\");\n                var link_data = this.modal.$el\n                    .find(\".link-checkbox\")\n                    .is(\":checked\");\n                var space_to_tab = this.modal.$el\n                    .find(\".spacetab-checkbox\")\n                    .is(\":checked\");\n                var to_posix_lines = this.modal.$el\n                    .find(\".posix-checkbox\")\n                    .is(\":checked\");\n                var tag_using_filenames = this.modal.$el\n                    .find(\".tag-files\")\n                    .is(\":checked\");\n                var file_type = this.select_extension.value();\n                var dbkey = this.select_genome.value();\n                var paths = $(\"textarea#import_paths\").val();\n                var valid_paths = [];\n                if (!paths) {\n                    mod_toastr.info(\n                        \"Please enter a path relative to Galaxy root.\"\n                    );\n                } else {\n                    this.modal.disableButton(\"Import\");\n                    paths = paths.split(\"\\n\");\n                    for (var i = paths.length - 1; i >= 0; i--) {\n                        var trimmed = paths[i].trim();\n                        if (trimmed.length !== 0) {\n                            valid_paths.push(trimmed);\n                        }\n                    }\n                    this.initChainCallControl({\n                        length: valid_paths.length,\n                        action: \"adding_datasets\"\n                    });\n                    this.chainCallImportingFolders({\n                        paths: valid_paths,\n                        preserve_dirs: preserve_dirs,\n                        link_data: link_data,\n                        space_to_tab: space_to_tab,\n                        to_posix_lines: to_posix_lines,\n                        source: \"admin_path\",\n                        file_type: file_type,\n                        tag_using_filenames: tag_using_filenames,\n                        dbkey: dbkey\n                    });\n                }\n            },\n\n            /**\n   * Initialize the control of chaining requests\n   * in the current modal.\n   * @param {int} length The number of items in the chain call.\n   */\n            initChainCallControl: function(options) {\n                var template;\n                switch (options.action) {\n                    case \"adding_datasets\":\n                        template = this.templateAddingDatasetsProgressBar();\n                        this.modal.$el.find(\".modal-body\").html(\n                            template({\n                                folder_name: this.options.folder_name\n                            })\n                        );\n                        break;\n                    case \"deleting_datasets\":\n                        template = this.templateDeletingItemsProgressBar();\n                        this.modal.$el.find(\".modal-body\").html(template());\n                        break;\n                    case \"to_history\":\n                        template = this.templateImportIntoHistoryProgressBar();\n                        this.modal.$el\n                            .find(\".modal-body\")\n                            .html(\n                                template({ history_name: options.history_name })\n                            );\n                        break;\n                    default:\n                        Galaxy.emit.error(\n                            \"Wrong action specified.\",\n                            \"datalibs\"\n                        );\n                        break;\n                }\n\n                // var progress_bar_tmpl = this.templateAddingDatasetsProgressBar();\n                // this.modal.$el.find( '.modal-body' ).html( progress_bar_tmpl( { folder_name : this.options.folder_name } ) );\n                this.progress = 0;\n                this.progressStep = 100 / options.length;\n                this.options.chain_call_control.total_number = options.length;\n                this.options.chain_call_control.failed_number = 0;\n            },\n\n            /**\n   * Take the selected items from the jstree, create a request queue\n   * and send them one by one to the server for importing into\n   * the current folder.\n   *\n   * jstree.js has to be loaded before\n   * @see renderJstree\n   */\n            importFromJstreePath: function(that, options) {\n                var all_nodes = $(\"#jstree_browser\")\n                    .jstree()\n                    .get_selected(true);\n                // remove the disabled elements that could have been trigerred with the 'select all'\n                var selected_nodes = _.filter(all_nodes, function(node) {\n                    return node.state.disabled == false;\n                });\n                var preserve_dirs = this.modal.$el\n                    .find(\".preserve-checkbox\")\n                    .is(\":checked\");\n                var link_data = this.modal.$el\n                    .find(\".link-checkbox\")\n                    .is(\":checked\");\n                var space_to_tab = this.modal.$el\n                    .find(\".spacetab-checkbox\")\n                    .is(\":checked\");\n                var to_posix_lines = this.modal.$el\n                    .find(\".posix-checkbox\")\n                    .is(\":checked\");\n                var file_type = this.select_extension.value();\n                var dbkey = this.select_genome.value();\n                var tag_using_filenames = this.modal.$el\n                    .find(\".tag-files\")\n                    .is(\":checked\");\n                var selection_type = selected_nodes[0].type;\n                var paths = [];\n                if (selected_nodes.length < 1) {\n                    mod_toastr.info(\"Please select some items first.\");\n                } else {\n                    this.modal.disableButton(\"Import\");\n                    for (var i = selected_nodes.length - 1; i >= 0; i--) {\n                        if (selected_nodes[i].li_attr.full_path !== undefined) {\n                            paths.push(selected_nodes[i].li_attr.full_path);\n                        }\n                    }\n                    this.initChainCallControl({\n                        length: paths.length,\n                        action: \"adding_datasets\"\n                    });\n                    if (selection_type === \"folder\") {\n                        var full_source = options.source + \"_folder\";\n                        this.chainCallImportingFolders({\n                            paths: paths,\n                            preserve_dirs: preserve_dirs,\n                            link_data: link_data,\n                            space_to_tab: space_to_tab,\n                            to_posix_lines: to_posix_lines,\n                            source: full_source,\n                            file_type: file_type,\n                            dbkey: dbkey,\n                            tag_using_filenames: tag_using_filenames\n                        });\n                    } else if (selection_type === \"file\") {\n                        var full_source = options.source + \"_file\";\n                        this.chainCallImportingUserdirFiles({\n                            paths: paths,\n                            file_type: file_type,\n                            dbkey: dbkey,\n                            link_data: link_data,\n                            space_to_tab: space_to_tab,\n                            to_posix_lines: to_posix_lines,\n                            source: full_source,\n                            tag_using_filenames: tag_using_filenames\n                        });\n                    }\n                }\n            },\n\n            fetchAndDisplayHistoryContents: function(history_id) {\n                var history_contents = new mod_library_model.HistoryContents({\n                    id: history_id\n                });\n                var self = this;\n                history_contents.fetch({\n                    success: function(history_contents) {\n                        var history_contents_template = self.templateHistoryContents();\n                        self.histories\n                            .get(history_id)\n                            .set({ contents: history_contents });\n                        self.modal.$el.find(\"#selected_history_content\").html(\n                            history_contents_template({\n                                history_contents: history_contents.models.reverse()\n                            })\n                        );\n                        self.modal.$el\n                            .find(\".history-import-select-all\")\n                            .bind(\"click\", function() {\n                                $(\n                                    \"#selected_history_content [type=checkbox]\"\n                                ).prop(\"checked\", true);\n                            });\n                        self.modal.$el\n                            .find(\".history-import-unselect-all\")\n                            .bind(\"click\", function() {\n                                $(\n                                    \"#selected_history_content [type=checkbox]\"\n                                ).prop(\"checked\", false);\n                            });\n                    },\n                    error: function(model, response) {\n                        if (typeof response.responseJSON !== \"undefined\") {\n                            mod_toastr.error(response.responseJSON.err_msg);\n                        } else {\n                            mod_toastr.error(\"An error occurred.\");\n                        }\n                    }\n                });\n            },\n\n            /**\n   * Import all selected datasets from history into the current folder.\n   */\n            addAllDatasetsFromHistory: function() {\n                var checked_hdas = this.modal.$el\n                    .find(\"#selected_history_content\")\n                    .find(\":checked\");\n                var history_item_ids = []; // can be hda or hdca\n                var history_item_types = [];\n                var items_to_add = [];\n                if (checked_hdas.length < 1) {\n                    mod_toastr.info(\"You must select some datasets first.\");\n                } else {\n                    this.modal.disableButton(\"Add\");\n                    checked_hdas.each(function() {\n                        var hid = $(this)\n                            .closest(\"li\")\n                            .data(\"id\");\n                        if (hid) {\n                            var item_type = $(this)\n                                .closest(\"li\")\n                                .data(\"name\");\n                            history_item_ids.push(hid);\n                            history_item_types.push(item_type);\n                        }\n                    });\n                    for (var i = history_item_ids.length - 1; i >= 0; i--) {\n                        var history_item_id = history_item_ids[i];\n                        var folder_item = new mod_library_model.Item();\n                        folder_item.url =\n                            Galaxy.root +\n                            \"api/folders/\" +\n                            this.options.id +\n                            \"/contents\";\n                        if (history_item_types[i] === \"collection\") {\n                            folder_item.set({ from_hdca_id: history_item_id });\n                        } else {\n                            folder_item.set({ from_hda_id: history_item_id });\n                        }\n                        items_to_add.push(folder_item);\n                    }\n                    this.initChainCallControl({\n                        length: items_to_add.length,\n                        action: \"adding_datasets\"\n                    });\n                    this.chainCallAddingHdas(items_to_add);\n                }\n            },\n\n            /**\n   * Take array of empty history items and make request for each of them\n   * to create it on server. Update progress in between calls.\n   * @param  {array} history_item_set array of empty history items\n   * @param  {str} history_name     name of the history to import to\n   */\n            chainCallImportingIntoHistory: function(\n                history_item_set,\n                history_name\n            ) {\n                var self = this;\n                var popped_item = history_item_set.pop();\n                if (typeof popped_item == \"undefined\") {\n                    if (this.options.chain_call_control.failed_number === 0) {\n                        mod_toastr.success(\n                            \"Selected datasets imported into history. Click this to start analyzing it.\",\n                            \"\",\n                            {\n                                onclick: function() {\n                                    window.location = Galaxy.root;\n                                }\n                            }\n                        );\n                    } else if (\n                        this.options.chain_call_control.failed_number ===\n                        this.options.chain_call_control.total_number\n                    ) {\n                        mod_toastr.error(\n                            \"There was an error and no datasets were imported into history.\"\n                        );\n                    } else if (\n                        this.options.chain_call_control.failed_number <\n                        this.options.chain_call_control.total_number\n                    ) {\n                        mod_toastr.warning(\n                            \"Some of the datasets could not be imported into history. Click this to see what was imported.\",\n                            \"\",\n                            {\n                                onclick: function() {\n                                    window.location = Galaxy.root;\n                                }\n                            }\n                        );\n                    }\n                    Galaxy.modal.hide();\n                    return true;\n                }\n                var promise = $.when(\n                    popped_item.save({\n                        content: popped_item.content,\n                        source: popped_item.source\n                    })\n                );\n\n                promise\n                    .done(function() {\n                        self.updateProgress();\n                        self.chainCallImportingIntoHistory(\n                            history_item_set,\n                            history_name\n                        );\n                    })\n                    .fail(function() {\n                        self.options.chain_call_control.failed_number += 1;\n                        self.updateProgress();\n                        self.chainCallImportingIntoHistory(\n                            history_item_set,\n                            history_name\n                        );\n                    });\n            },\n\n            /**\n   * Take the array of paths and create a request for each of them\n   * calling them in chain. Update the progress bar in between each.\n   * @param  {array} paths                    paths relative to user folder on Galaxy\n   * @param  {boolean} tag_using_filenames    add tags to datasets using names of files\n   */\n            chainCallImportingUserdirFiles: function(options) {\n                var that = this;\n                var popped_item = options.paths.pop();\n                if (typeof popped_item === \"undefined\") {\n                    if (this.options.chain_call_control.failed_number === 0) {\n                        mod_toastr.success(\n                            \"Selected files imported into the current folder\"\n                        );\n                        Galaxy.modal.hide();\n                    } else {\n                        mod_toastr.error(\"An error occured.\");\n                    }\n                    return true;\n                }\n                var promise = $.when(\n                    $.post(\n                        Galaxy.root +\n                            \"api/libraries/datasets?encoded_folder_id=\" +\n                            that.id +\n                            \"&source=\" +\n                            options.source +\n                            \"&path=\" +\n                            popped_item +\n                            \"&file_type=\" +\n                            options.file_type +\n                            \"&link_data=\" +\n                            options.link_data +\n                            \"&space_to_tab=\" +\n                            options.space_to_tab +\n                            \"&to_posix_lines=\" +\n                            options.to_posix_lines +\n                            \"&dbkey=\" +\n                            options.dbkey +\n                            \"&tag_using_filenames=\" +\n                            options.tag_using_filenames\n                    )\n                );\n                promise\n                    .done(function(response) {\n                        that.updateProgress();\n                        that.chainCallImportingUserdirFiles(options);\n                    })\n                    .fail(function() {\n                        that.options.chain_call_control.failed_number += 1;\n                        that.updateProgress();\n                        that.chainCallImportingUserdirFiles(options);\n                    });\n            },\n\n            /**\n   * Take the array of paths and create a request for each of them\n   * calling them in series. Update the progress bar in between each.\n   * @param  {array} paths                    paths relative to Galaxy root folder\n   * @param  {boolean} preserve_dirs          indicates whether to preserve folder structure\n   * @param  {boolean} link_data              copy files to Galaxy or link instead\n   * @param  {boolean} to_posix_lines         convert line endings to POSIX standard\n   * @param  {boolean} space_to_tab           convert spaces to tabs\n   * @param  {str} source                     string representing what type of folder\n   *                                          is the source of import\n   * @param  {boolean} tag_using_filenames    add tags to datasets using names of files\n   */\n            chainCallImportingFolders: function(options) {\n                // TODO need to check which paths to call\n                var that = this;\n                var popped_item = options.paths.pop();\n                if (typeof popped_item == \"undefined\") {\n                    if (this.options.chain_call_control.failed_number === 0) {\n                        mod_toastr.success(\n                            \"Selected folders and their contents imported into the current folder.\"\n                        );\n                        Galaxy.modal.hide();\n                    } else {\n                        // TODO better error report\n                        mod_toastr.error(\"An error occured.\");\n                    }\n                    return true;\n                }\n                var promise = $.when(\n                    $.post(\n                        Galaxy.root +\n                            \"api/libraries/datasets?encoded_folder_id=\" +\n                            that.id +\n                            \"&source=\" +\n                            options.source +\n                            \"&path=\" +\n                            popped_item +\n                            \"&preserve_dirs=\" +\n                            options.preserve_dirs +\n                            \"&link_data=\" +\n                            options.link_data +\n                            \"&to_posix_lines=\" +\n                            options.to_posix_lines +\n                            \"&space_to_tab=\" +\n                            options.space_to_tab +\n                            \"&file_type=\" +\n                            options.file_type +\n                            \"&dbkey=\" +\n                            options.dbkey +\n                            \"&tag_using_filenames=\" +\n                            options.tag_using_filenames\n                    )\n                );\n                promise\n                    .done(function(response) {\n                        that.updateProgress();\n                        that.chainCallImportingFolders(options);\n                    })\n                    .fail(function() {\n                        that.options.chain_call_control.failed_number += 1;\n                        that.updateProgress();\n                        that.chainCallImportingFolders(options);\n                    });\n            },\n\n            /**\n   * Take the array of hdas and create a request for each.\n   * Call them in chain and update progress bar in between each.\n   * @param  {array} hdas_set array of empty hda objects\n   */\n            chainCallAddingHdas: function(hdas_set) {\n                var self = this;\n                this.added_hdas = new mod_library_model.Folder();\n                var popped_item = hdas_set.pop();\n                if (typeof popped_item == \"undefined\") {\n                    if (this.options.chain_call_control.failed_number === 0) {\n                        mod_toastr.success(\n                            \"Selected datasets from history added to the folder\"\n                        );\n                    } else if (\n                        this.options.chain_call_control.failed_number ===\n                        this.options.chain_call_control.total_number\n                    ) {\n                        mod_toastr.error(\n                            \"There was an error and no datasets were added to the folder.\"\n                        );\n                    } else if (\n                        this.options.chain_call_control.failed_number <\n                        this.options.chain_call_control.total_number\n                    ) {\n                        mod_toastr.warning(\n                            \"Some of the datasets could not be added to the folder\"\n                        );\n                    }\n                    Galaxy.modal.hide();\n                    return this.added_hdas;\n                }\n                var promise = $.when(\n                    popped_item.save({\n                        from_hda_id: popped_item.get(\"from_hda_id\")\n                    })\n                );\n\n                promise\n                    .done(function(model) {\n                        Galaxy.libraries.folderListView.collection.add(model);\n                        self.updateProgress();\n                        self.chainCallAddingHdas(hdas_set);\n                    })\n                    .fail(function() {\n                        self.options.chain_call_control.failed_number += 1;\n                        self.updateProgress();\n                        self.chainCallAddingHdas(hdas_set);\n                    });\n            },\n\n            /**\n   * Take the array of lddas, create request for each and\n   * call them in chain. Update progress bar in between each.\n   * @param  {array} lddas_set array of lddas to delete\n   */\n            chainCallDeletingItems: function(items_to_delete) {\n                var self = this;\n                this.deleted_items = new mod_library_model.Folder();\n                var item_to_delete = items_to_delete.pop();\n                if (typeof item_to_delete === \"undefined\") {\n                    if (this.options.chain_call_control.failed_number === 0) {\n                        mod_toastr.success(\"Selected items were deleted.\");\n                    } else if (\n                        this.options.chain_call_control.failed_number ===\n                        this.options.chain_call_control.total_number\n                    ) {\n                        mod_toastr.error(\n                            \"There was an error and no items were deleted. Please make sure you have sufficient permissions.\"\n                        );\n                    } else if (\n                        this.options.chain_call_control.failed_number <\n                        this.options.chain_call_control.total_number\n                    ) {\n                        mod_toastr.warning(\n                            \"Some of the items could not be deleted. Please make sure you have sufficient permissions.\"\n                        );\n                    }\n                    Galaxy.modal.hide();\n                    return this.deleted_items;\n                }\n                item_to_delete\n                    .destroy()\n                    .done(function(item) {\n                        Galaxy.libraries.folderListView.collection.remove(\n                            item_to_delete.id\n                        );\n                        self.updateProgress();\n                        // add the deleted item to collection, triggers rendering\n                        if (\n                            Galaxy.libraries.folderListView.options\n                                .include_deleted\n                        ) {\n                            var updated_item = null;\n                            if (\n                                item.type === \"folder\" ||\n                                item.model_class === \"LibraryFolder\"\n                            ) {\n                                updated_item = new mod_library_model.FolderAsModel(\n                                    item\n                                );\n                            } else if (\n                                item.type === \"file\" ||\n                                item.model_class === \"LibraryDataset\"\n                            ) {\n                                updated_item = new mod_library_model.Item(item);\n                            } else {\n                                Galaxy.emit.error(\n                                    \"Unknown library item type found.\",\n                                    \"datalibs\"\n                                );\n                                Galaxy.emit.error(\n                                    item.type || item.model_class,\n                                    \"datalibs\"\n                                );\n                            }\n                            Galaxy.libraries.folderListView.collection.add(\n                                updated_item\n                            );\n                        }\n                        self.chainCallDeletingItems(items_to_delete);\n                    })\n                    .fail(function() {\n                        self.options.chain_call_control.failed_number += 1;\n                        self.updateProgress();\n                        self.chainCallDeletingItems(items_to_delete);\n                    });\n            },\n\n            /**\n   * Handles the click on 'show deleted' checkbox\n   */\n            checkIncludeDeleted: function(event) {\n                if (event.target.checked) {\n                    Galaxy.libraries.folderListView.fetchFolder({\n                        include_deleted: true\n                    });\n                } else {\n                    Galaxy.libraries.folderListView.fetchFolder({\n                        include_deleted: false\n                    });\n                }\n            },\n\n            /**\n   * Delete the selected items. Atomic. One by one.\n   */\n            deleteSelectedItems: function() {\n                var dataset_ids = [];\n                var folder_ids = [];\n                var $checkedValues = this.findCheckedRows();\n                if ($checkedValues.length === 0) {\n                    mod_toastr.info(\n                        \"You must select at least one item for deletion.\"\n                    );\n                } else {\n                    var template = this.templateDeletingItemsProgressBar();\n                    this.modal = Galaxy.modal;\n                    this.modal.show({\n                        closing_events: true,\n                        title: \"Deleting selected items\",\n                        body: template({}),\n                        buttons: {\n                            Close: function() {\n                                Galaxy.modal.hide();\n                            }\n                        }\n                    });\n                    // init the control counters\n                    this.options.chain_call_control.total_number = 0;\n                    this.options.chain_call_control.failed_number = 0;\n                    $checkedValues.each(function() {\n                        var row_id = $(this)\n                            .closest(\"tr\")\n                            .data(\"id\");\n                        if (row_id !== undefined) {\n                            if (row_id.substring(0, 1) == \"F\") {\n                                folder_ids.push(row_id);\n                            } else {\n                                dataset_ids.push(row_id);\n                            }\n                        }\n                    });\n                    // init the progress bar\n                    var items_total = dataset_ids.length + folder_ids.length;\n                    this.progressStep = 100 / items_total;\n                    this.progress = 0;\n\n                    // prepare the dataset items to be added\n                    var items_to_delete = [];\n                    for (var i = dataset_ids.length - 1; i >= 0; i--) {\n                        var dataset = new mod_library_model.Item({\n                            id: dataset_ids[i]\n                        });\n                        items_to_delete.push(dataset);\n                    }\n                    for (var i = folder_ids.length - 1; i >= 0; i--) {\n                        var folder = new mod_library_model.FolderAsModel({\n                            id: folder_ids[i]\n                        });\n                        items_to_delete.push(folder);\n                    }\n\n                    this.options.chain_call_control.total_number = items_total;\n                    // call the recursive function to call ajax one after each other (request FIFO queue)\n                    this.chainCallDeletingItems(items_to_delete);\n                }\n            },\n\n            showLocInfo: function() {\n                var library = null;\n                var that = this;\n                if (Galaxy.libraries.libraryListView !== null) {\n                    library = Galaxy.libraries.libraryListView.collection.get(\n                        this.options.parent_library_id\n                    );\n                    this.showLocInfoModal(library);\n                } else {\n                    library = new mod_library_model.Library({\n                        id: this.options.parent_library_id\n                    });\n                    library.fetch({\n                        success: function() {\n                            that.showLocInfoModal(library);\n                        },\n                        error: function(model, response) {\n                            if (typeof response.responseJSON !== \"undefined\") {\n                                mod_toastr.error(response.responseJSON.err_msg);\n                            } else {\n                                mod_toastr.error(\"An error occurred.\");\n                            }\n                        }\n                    });\n                }\n            },\n\n            showLocInfoModal: function(library) {\n                var that = this;\n                var template = this.templateLocInfoInModal();\n                this.modal = Galaxy.modal;\n                this.modal.show({\n                    closing_events: true,\n                    title: \"Location Details\",\n                    body: template({ library: library, options: that.options }),\n                    buttons: {\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            },\n\n            showImportModal: function(options) {\n                switch (options.source) {\n                    case \"history\":\n                        this.addFilesFromHistoryModal();\n                        break;\n                    case \"importdir\":\n                        this.importFilesFromGalaxyFolderModal({\n                            source: \"importdir\"\n                        });\n                        break;\n                    case \"path\":\n                        this.importFilesFromPathModal();\n                        break;\n                    case \"userdir\":\n                        this.importFilesFromGalaxyFolderModal({\n                            source: \"userdir\"\n                        });\n                        break;\n                    default:\n                        Galaxy.libraries.library_router.back();\n                        mod_toastr.error(\"Invalid import source.\");\n                        break;\n                }\n            },\n\n            /**\n   * Show user the prompt to change the number of items shown on page.\n   */\n            showPageSizePrompt: function() {\n                var folder_page_size = prompt(\n                    \"How many items per page do you want to see?\",\n                    Galaxy.libraries.preferences.get(\"folder_page_size\")\n                );\n                if (\n                    folder_page_size != null &&\n                    folder_page_size == parseInt(folder_page_size)\n                ) {\n                    Galaxy.libraries.preferences.set({\n                        folder_page_size: parseInt(folder_page_size)\n                    });\n                    Galaxy.libraries.folderListView.render({\n                        id: this.options.id,\n                        show_page: 1\n                    });\n                }\n            },\n\n            findCheckedRows: function() {\n                return $(\"#folder_list_body\").find(\":checked\");\n            },\n\n            templateToolBar: function() {\n                return _.template(\n                    [\n                        // container start\n                        '<div class=\"library_style_container\">',\n                        // toolbar start\n                        '<div id=\"library_toolbar\">',\n                        '<form class=\"form-inline\" role=\"form\">',\n                        \"<span><strong>DATA LIBRARIES</strong></span>\",\n                        // paginator will append here\n                        '<span class=\"library-paginator folder-paginator\"></span>',\n                        '<div class=\"checkbox toolbar-item logged-dataset-manipulation\" style=\"height: 20px; display:none;\">',\n                        \"<label>\",\n                        '<input id=\"include_deleted_datasets_chk\" type=\"checkbox\">include deleted</input>',\n                        \"</label>\",\n                        \"</div>\",\n                        '<button style=\"display:none;\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Create New Folder\" id=\"toolbtn_create_folder\" class=\"btn btn-default primary-button add-library-items toolbar-item\" type=\"button\">',\n                        '<span class=\"fa fa-plus\"></span><span class=\"fa fa-folder\"></span>',\n                        \"</button>\",\n                        \"<% if(mutiple_add_dataset_options) { %>\",\n                        '<div class=\"btn-group add-library-items\" style=\"display:none;\">',\n                        '<button title=\"Add Datasets to Current Folder\" id=\"\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n                        '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span><span class=\"caret\"></span>',\n                        \"</button>\",\n                        '<ul class=\"dropdown-menu\" role=\"menu\">',\n                        '<li><a href=\"#folders/<%= id %>/import/history\"> from History</a></li>',\n                        \"<% if(Galaxy.config.user_library_import_dir !== null) { %>\",\n                        '<li><a href=\"#folders/<%= id %>/import/userdir\"> from User Directory</a></li>',\n                        \"<% } %>\",\n                        \"<% if(Galaxy.config.allow_library_path_paste) { %>\",\n                        '<li class=\"divider\"></li>',\n                        '<li class=\"dropdown-header\">Admins only</li>',\n                        \"<% if(Galaxy.config.library_import_dir !== null) { %>\",\n                        '<li><a href=\"#folders/<%= id %>/import/importdir\">from Import Directory</a></li>',\n                        \"<% } %>\",\n                        \"<% if(Galaxy.config.allow_library_path_paste) { %>\",\n                        '<li><a href=\"#folders/<%= id %>/import/path\">from Path</a></li>',\n                        \"<% } %>\",\n                        \"<% } %>\",\n                        \"</ul>\",\n                        \"</div>\",\n                        \"<% } else { %>\",\n                        '<a  data-placement=\"top\" title=\"Add Datasets to Current Folder\" style=\"display:none;\" class=\"btn btn-default add-library-items\" href=\"#folders/<%= id %>/import/history\" role=\"button\">',\n                        '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span>',\n                        \"</a>\",\n                        \"<% } %>\",\n                        '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Import selected datasets into history\" id=\"toolbtn_bulk_import\" class=\"primary-button dataset-manipulation\" style=\"margin-left: 0.5em; display:none;\" type=\"button\">',\n                        '<span class=\"fa fa-book\"></span>',\n                        \"&nbsp;to History\",\n                        \"</button>\",\n                        '<div class=\"btn-group dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \">',\n                        '<button title=\"Download selected items as archive\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n                        '<span class=\"fa fa-download\"></span> Download <span class=\"caret\"></span>',\n                        \"</button>\",\n                        '<ul class=\"dropdown-menu\" role=\"menu\">',\n                        '<li><a href=\"#/folders/<%= id %>/download/tgz\">.tar.gz</a></li>',\n                        '<li><a href=\"#/folders/<%= id %>/download/tbz\">.tar.bz</a></li>',\n                        '<li><a href=\"#/folders/<%= id %>/download/zip\">.zip</a></li>',\n                        \"</ul>\",\n                        \"</div>\",\n                        '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Mark selected items deleted\" id=\"toolbtn_bulk_delete\" class=\"primary-button logged-dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \" type=\"button\">',\n                        '<span class=\"fa fa-times\"></span> Delete</button>',\n                        '<button data-id=\"<%- id %>\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Show location details\" class=\"primary-button toolbtn-show-locinfo\" style=\"margin-left: 0.5em;\" type=\"button\">',\n                        '<span class=\"fa fa-info-circle\"></span>',\n                        \"&nbsp;Details\",\n                        \"</button>\",\n                        '<span class=\"help-button\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"See this screen annotated\">',\n                        '<a href=\"https://galaxyproject.org/data-libraries/screen/folder-contents/\" target=\"_blank\">',\n                        '<button class=\"primary-button\" type=\"button\">',\n                        '<span class=\"fa fa-question-circle\"></span>',\n                        \"&nbsp;Help\",\n                        \"</button>\",\n                        \"</a>\",\n                        \"</span>\",\n                        \"</div>\",\n                        \"</form>\",\n                        // toolbar end\n                        '<div id=\"folder_items_element\">',\n                        \"</div>\",\n                        // paginator will append here\n                        '<div class=\"folder-paginator paginator-bottom\"></div>',\n                        // container end\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateLocInfoInModal: function() {\n                return _.template(\n                    [\n                        \"<div>\",\n                        '<table class=\"grid table table-condensed\">',\n                        \"<thead>\",\n                        '<th style=\"width: 25%;\">library</th>',\n                        \"<th></th>\",\n                        \"</thead>\",\n                        \"<tbody>\",\n                        \"<tr>\",\n                        \"<td>name</td>\",\n                        '<td><%- library.get(\"name\") %></td>',\n                        \"</tr>\",\n                        '<% if(library.get(\"description\") !== \"\") { %>',\n                        \"<tr>\",\n                        \"<td>description</td>\",\n                        '<td><%- library.get(\"description\") %></td>',\n                        \"</tr>\",\n                        \"<% } %>\",\n                        '<% if(library.get(\"synopsis\") !== \"\") { %>',\n                        \"<tr>\",\n                        \"<td>synopsis</td>\",\n                        '<td><%- library.get(\"synopsis\") %></td>',\n                        \"</tr>\",\n                        \"<% } %>\",\n                        '<% if(library.get(\"create_time_pretty\") !== \"\") { %>',\n                        \"<tr>\",\n                        \"<td>created</td>\",\n                        '<td><span title=\"<%- library.get(\"create_time\") %>\"><%- library.get(\"create_time_pretty\") %></span></td>',\n                        \"</tr>\",\n                        \"<% } %>\",\n                        \"<tr>\",\n                        \"<td>id</td>\",\n                        '<td><%- library.get(\"id\") %></td>',\n                        \"</tr>\",\n                        \"</tbody>\",\n                        \"</table>\",\n                        '<table class=\"grid table table-condensed\">',\n                        \"<thead>\",\n                        '<th style=\"width: 25%;\">folder</th>',\n                        \"<th></th>\",\n                        \"</thead>\",\n                        \"<tbody>\",\n                        \"<tr>\",\n                        \"<td>name</td>\",\n                        \"<td><%- options.folder_name %></td>\",\n                        \"</tr>\",\n                        '<% if(options.folder_description !== \"\") { %>',\n                        \"<tr>\",\n                        \"<td>description</td>\",\n                        \"<td><%- options.folder_description %></td>\",\n                        \"</tr>\",\n                        \"<% } %>\",\n                        \"<tr>\",\n                        \"<td>id</td>\",\n                        \"<td><%- options.id %></td>\",\n                        \"</tr>\",\n                        \"</tbody>\",\n                        \"</table>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateNewFolderInModal: function() {\n                return _.template(\n                    [\n                        '<div id=\"new_folder_modal\">',\n                        \"<form>\",\n                        '<input type=\"text\" name=\"Name\" value=\"\" placeholder=\"Name\" autofocus>',\n                        '<input type=\"text\" name=\"Description\" value=\"\" placeholder=\"Description\">',\n                        \"</form>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateBulkImportInModal: function() {\n                return _.template(\n                    [\n                        \"<div>\",\n                        '<div class=\"library-modal-item\">',\n                        \"Select history: \",\n                        '<select id=\"dataset_import_bulk\" name=\"dataset_import_bulk\" style=\"width:50%; margin-bottom: 1em; \" autofocus>',\n                        \"<% _.each(histories, function(history) { %>\",\n                        '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n                        \"<% }); %>\",\n                        \"</select>\",\n                        \"</div>\",\n                        '<div class=\"library-modal-item\">',\n                        \"or create new: \",\n                        '<input type=\"text\" name=\"history_name\" value=\"\" placeholder=\"name of the new history\" style=\"width:50%;\">',\n                        \"</input>\",\n                        \"</div>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateImportIntoHistoryProgressBar: function() {\n                return _.template(\n                    [\n                        '<div class=\"import_text\">',\n                        \"Importing selected items to history <b><%= _.escape(history_name) %></b>\",\n                        \"</div>\",\n                        '<div class=\"progress\">',\n                        '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                        '<span class=\"completion_span\">0% Complete</span>',\n                        \"</div>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateAddingDatasetsProgressBar: function() {\n                return _.template(\n                    [\n                        '<div class=\"import_text\">',\n                        \"Adding selected datasets to library folder <b><%= _.escape(folder_name) %></b>\",\n                        \"</div>\",\n                        '<div class=\"progress\">',\n                        '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                        '<span class=\"completion_span\">0% Complete</span>',\n                        \"</div>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateDeletingItemsProgressBar: function() {\n                return _.template(\n                    [\n                        '<div class=\"import_text\">',\n                        \"</div>\",\n                        '<div class=\"progress\">',\n                        '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                        '<span class=\"completion_span\">0% Complete</span>',\n                        \"</div>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateBrowserModal: function() {\n                return _.template(\n                    [\n                        '<div id=\"file_browser_modal\">',\n                        '<div class=\"alert alert-info jstree-files-message\">All files you select will be imported into the current folder ignoring their folder structure.</div>',\n                        '<div class=\"alert alert-info jstree-folders-message\" style=\"display:none;\">All files within the selected folders and their subfolders will be imported into the current folder.</div>',\n                        '<div style=\"margin-bottom:1em;\">',\n                        '<label title=\"Switch to selecting files\" class=\"radio-inline import-type-switch\">',\n                        '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-folders\" checked=\"checked\"> Choose Files',\n                        \"</label>\",\n                        '<label title=\"Switch to selecting folders\" class=\"radio-inline import-type-switch\">',\n                        '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-files\"> Choose Folders',\n                        \"</label>\",\n                        \"</div>\",\n                        '<div style=\"margin-bottom:1em;\">',\n                        '<label class=\"checkbox-inline jstree-preserve-structure\" style=\"display:none;\">',\n                        '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n                        \"Preserve directory structure\",\n                        \"</label>\",\n                        '<label class=\"checkbox-inline\">',\n                        '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n                        \"Link files instead of copying\",\n                        \"</label>\",\n                        '<label class=\"checkbox-inline\">',\n                        '<input class=\"posix-checkbox\" type=\"checkbox\" value=\"to_posix_lines\" checked=\"checked\">',\n                        \"Convert line endings to POSIX\",\n                        \"</label>\",\n                        '<label class=\"checkbox-inline\">',\n                        '<input class=\"spacetab-checkbox\" type=\"checkbox\" value=\"space_to_tab\">',\n                        \"Convert spaces to tabs\",\n                        \"</label>\",\n                        \"</div>\",\n                        '<button title=\"Select all files\" type=\"button\" class=\"button primary-button libimport-select-all\">',\n                        \"Select all\",\n                        \"</button>\",\n                        '<button title=\"Select no files\" type=\"button\" class=\"button primary-button libimport-select-none\">',\n                        \"Unselect all\",\n                        \"</button>\",\n                        \"<hr />\",\n                        // append jstree object here\n                        '<div id=\"jstree_browser\">',\n                        \"</div>\",\n                        \"<hr />\",\n                        \"<p>You can set extension type and genome for all imported datasets at once:</p>\",\n                        \"<div>\",\n                        'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n                        'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n                        \"</div>\",\n                        \"<br>\",\n                        \"<div>\",\n                        '<label class=\"checkbox-inline tag-files\">',\n                        \"Tag datasets based on file names.\",\n                        '<input class=\"tag-files\" type=\"checkbox\" value=\"tag_using_filenames\" checked=\"checked\">',\n                        \"</label>\",\n                        \"</div>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateImportPathModal: function() {\n                return _.template(\n                    [\n                        '<div id=\"file_browser_modal\">',\n                        '<div class=\"alert alert-info jstree-folders-message\">All files within the given folders and their subfolders will be imported into the current folder.</div>',\n                        '<div style=\"margin-bottom: 0.5em;\">',\n                        '<label class=\"checkbox-inline\">',\n                        '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n                        \"Preserve directory structure\",\n                        \"</label>\",\n                        '<label class=\"checkbox-inline\">',\n                        '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n                        \"Link files instead of copying\",\n                        \"</label>\",\n                        \"<br>\",\n                        '<label class=\"checkbox-inline\">',\n                        '<input class=\"posix-checkbox\" type=\"checkbox\" value=\"to_posix_lines\" checked=\"checked\">',\n                        \"Convert line endings to POSIX\",\n                        \"</label>\",\n                        '<label class=\"checkbox-inline\">',\n                        '<input class=\"spacetab-checkbox\" type=\"checkbox\" value=\"space_to_tab\">',\n                        \"Convert spaces to tabs\",\n                        \"</label>\",\n                        \"</div>\",\n                        '<textarea id=\"import_paths\" class=\"form-control\" rows=\"5\" placeholder=\"Absolute paths (or paths relative to Galaxy root) separated by newline\" autofocus></textarea>',\n                        \"<hr />\",\n                        \"<p>You can set extension type and genome for all imported datasets at once:</p>\",\n                        \"<div>\",\n                        'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n                        'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n                        \"</div>\",\n                        \"<div>\",\n                        '<label class=\"checkbox-inline tag-files\">',\n                        \"Tag datasets based on file names.\",\n                        '<input class=\"tag-files\" type=\"checkbox\" value=\"tag_using_filenames\" checked=\"checked\">',\n                        \"</label>\",\n                        \"</div>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateAddFilesFromHistory: function() {\n                return _.template(\n                    [\n                        '<div id=\"add_files_modal\">',\n                        \"<div>\",\n                        \"1.&nbsp;Select history:&nbsp;\",\n                        '<select id=\"dataset_add_bulk\" name=\"dataset_add_bulk\" style=\"width:66%; \"> ',\n                        \"<% _.each(histories, function(history) { %>\", //history select box\n                        '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n                        \"<% }); %>\",\n                        \"</select>\",\n                        \"</div>\",\n                        \"<br/>\",\n                        '<div id=\"selected_history_content\">',\n                        \"</div>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateHistoryContents: function() {\n                return _.template(\n                    [\n                        \"<p>2.&nbsp;Choose the datasets to import:</p>\",\n                        \"<div>\",\n                        '<button title=\"Select all datasets\" type=\"button\" class=\"button primary-button history-import-select-all\">',\n                        \"Select all\",\n                        \"</button>\",\n                        '<button title=\"Select all datasets\" type=\"button\" class=\"button primary-button history-import-unselect-all\">',\n                        \"Unselect all\",\n                        \"</button>\",\n                        \"</div>\",\n                        \"<br>\",\n                        \"<ul>\",\n                        \"<% _.each(history_contents, function(history_item) { %>\",\n                        '<% if (history_item.get(\"deleted\") != true ) { %>',\n                        '<% var item_name = history_item.get(\"name\") %>',\n                        '<% if (history_item.get(\"type\") === \"collection\") { %>',\n                        '<% var collection_type = history_item.get(\"collection_type\") %>',\n                        '<% if (collection_type === \"list\") { %>',\n                        '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                        \"<label>\",\n                        '<label title=\"<%= _.escape(item_name) %>\">',\n                        '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: ',\n                        '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %> (Dataset Collection)',\n                        \"</label>\",\n                        \"</li>\",\n                        \"<% } else { %>\",\n                        '<li><input style=\"margin: 0;\" type=\"checkbox\" onclick=\"return false;\" disabled=\"disabled\">',\n                        '<span title=\"You can convert this collection into a collection of type list using the Collection Tools\">',\n                        '<%= _.escape(history_item.get(\"hid\")) %>: ',\n                        '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %> (Dataset Collection of type <%= _.escape(collection_type) %> not supported.)',\n                        \"</span>\",\n                        \"</li>\",\n                        \"<% } %>\",\n                        '<% } else if (history_item.get(\"visible\") === true && history_item.get(\"state\") === \"ok\") { %>',\n                        '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                        '<label title=\"<%= _.escape(item_name) %>\">',\n                        '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: ',\n                        '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %>',\n                        \"</label>\",\n                        \"</li>\",\n                        \"<% } %>\",\n                        \"<% } %>\",\n                        \"<% }); %>\",\n                        \"</ul>\"\n                    ].join(\"\")\n                );\n            },\n\n            templatePaginator: function() {\n                return _.template(\n                    [\n                        '<ul class=\"pagination pagination-sm\">',\n                        \"<% if ( ( show_page - 1 ) > 0 ) { %>\",\n                        \"<% if ( ( show_page - 1 ) > page_count ) { %>\", // we are on higher page than total page count\n                        '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n                        \"<% } else { %>\",\n                        '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                        '<li><a href=\"#folders/<%= id %>/page/<% print( show_page - 1 ) %>\"><% print( show_page - 1 ) %></a></li>',\n                        \"<% } %>\",\n                        \"<% } else { %>\", // we are on the first page\n                        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n                        \"<% } %>\",\n                        '<li class=\"active\">',\n                        '<a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page ) %></a>',\n                        \"</li>\",\n                        \"<% if ( ( show_page ) < page_count ) { %>\",\n                        '<li><a href=\"#folders/<%= id %>/page/<% print( show_page + 1 ) %>\"><% print( show_page + 1 ) %></a></li>',\n                        '<li><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n                        \"<% } else { %>\",\n                        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page  ) %>\"><% print( show_page + 1 ) %></a></li>',\n                        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n                        \"<% } %>\",\n                        \"</ul>\",\n                        \"<span>\",\n                        \"&nbsp;showing&nbsp;\",\n                        '<a data-toggle=\"tooltip\" data-placement=\"top\" title=\"Click to change the number of items on page\" class=\"page_size_prompt\">',\n                        \"<%- items_shown %>\",\n                        \"</a>\",\n                        \"&nbsp;of <%- total_items_count %> items\",\n                        \"</span>\"\n                    ].join(\"\")\n                );\n            }\n        });\n\n        return {\n            FolderToolbarView: FolderToolbarView\n        };\n    }\n);\n"]}