{"version":3,"sources":["libs/backbone.js"],"names":["factory","root","self","global","_typeof","define","amd","_","$","exports","Backbone","require","e","jQuery","Zepto","ender","previousBackbone","slice","Array","prototype","VERSION","noConflict","this","emulateHTTP","emulateJSON","addMethod","length","method","attribute","value","iteratee","context","cb","defaultVal","args","call","arguments","unshift","apply","addUnderscoreMethods","each","methods","Class","instance","isFunction","isObject","_isModel","modelMatcher","attrs","matcher","matches","model","attributes","Events","eventSplitter","eventsApi","events","name","callback","opts","names","i","keys","test","split","on","internalOn","obj","listening","ctx","id","listenTo","_listenId","uniqueId","listeningTo","_listeners","listeners","thisId","objId","count","onApi","options","handlers","push","off","_events","offApi","stopListening","_listeningTo","ids","remaining","j","handler","_callback","once","onceMap","bind","listenToOnce","map","offer","trigger","Math","max","triggerApi","objEvents","allEvents","all","concat","triggerEvents","ev","a1","a2","a3","l","extend","Model","cid","cidPrefix","collection","defaults","result","set","changed","initialize","idAttribute","toJSON","sync","get","attr","escape","clone","val","key","_validate","unset","silent","changes","changing","_changing","_previousAttributes","current","prev","isEqual","_pending","clear","hasChanged","isEmpty","has","changedAttributes","diff","old","size","previousAttributes","fetch","parse","success","resp","serverAttrs","wrapError","save","previous","validate","wait","isNew","patch","xhr","destroy","url","base","encodeURIComponent","constructor","defer","isValid","error","validationError","replace","values","pairs","invert","pick","omit","chain","Collection","models","comparator","_reset","reset","setOptions","add","remove","merge","addOptions","splice","array","insert","at","min","modelMethods","tail","singular","isArray","removed","_removeModels","toAdd","toMerge","toRemove","modelMap","sort","merged","sortAttr","isString","existing","_prepareModel","_addReference","orderChanged","sortable","m","index","pop","shift","previousModels","_byId","first","findWhere","Error","modelId","sortBy","pluck","create","callbackOpts","indexOf","_removeReference","_onModelEvent","event","prevId","forEach","collect","reduce","foldl","inject","reduceRight","foldr","find","detect","filter","every","some","include","includes","contains","toArray","head","take","drop","last","without","difference","shuffle","lastIndexOf","partition","countBy","indexBy","findLastIndex","View","_ensureElement","initial","selector","$el","render","_removeElement","setElement","element","undelegateEvents","_setElement","delegateEvents","el","delegate","match","eventName","listener","undelegate","_createElement","tagName","className","_setAttributes","type","methodMap","params","dataType","urlError","data","contentType","JSON","stringify","_method","beforeSend","processData","textStatus","errorThrown","update","delete","read","setRequestHeader","ajax","Router","routes","route","isRegExp","_routeToRegExp","router","_extractParameters","fragment","_bindRoutes","history","execute","navigate","optional","RegExp","exec","param","decodeURIComponent","History","checkUrl","location","splatParam","started","interval","atRoot","pathname","getSearch","matchRoot","window","decodeFragment","decodeURI","href","getHash","getPath","path","charAt","getFragment","rootPath","_usePushState","_wantsHashChange","start","hashChange","_hasHashChange","document","documentMode","_useHashChange","_wantsPushState","pushState","_hasPushState","routeStripper","createElement","style","display","iframe","tabIndex","body","iWindow","insertBefore","firstChild","contentWindow","open","close","addEventListener","_checkUrlInterval","setInterval","loadUrl","stop","removeEventListener","detachEvent","removeChild","clearInterval","title","_updateHash","protoProps","staticProps","child","parent","__super__"],"mappings":"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","file":"../../scripts/libs/backbone.js","sourcesContent":["//     Backbone.js 1.3.3\n\n//     (c) 2010-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Backbone may be freely distributed under the MIT license.\n//     For all details and documentation:\n//     http://backbonejs.org\n\n(function(factory) {\n\n  // Establish the root object, `window` (`self`) in the browser, or `global` on the server.\n  // We use `self` instead of `window` for `WebWorker` support.\n  var root = (typeof self == 'object' && self.self === self && self) ||\n            (typeof global == 'object' && global.global === global && global);\n\n  // Set up Backbone appropriately for the environment. Start with AMD.\n  if (typeof define === 'function' && define.amd) {\n    define(['underscore', 'jquery', 'exports'], function(_, $, exports) {\n      // Export global even in AMD case in case this script is loaded with\n      // others that may still expect a global Backbone.\n      root.Backbone = factory(root, exports, _, $);\n    });\n\n  // Next for Node.js or CommonJS. jQuery may not be needed as a module.\n  } else if (typeof exports !== 'undefined') {\n    var _ = require('underscore'), $;\n    try { $ = require('jquery'); } catch (e) {}\n    factory(root, exports, _, $);\n\n  // Finally, as a browser global.\n  } else {\n    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));\n  }\n\n})(function(root, Backbone, _, $) {\n\n  // Initial Setup\n  // -------------\n\n  // Save the previous value of the `Backbone` variable, so that it can be\n  // restored later on, if `noConflict` is used.\n  var previousBackbone = root.Backbone;\n\n  // Create a local reference to a common array method we'll want to use later.\n  var slice = Array.prototype.slice;\n\n  // Current version of the library. Keep in sync with `package.json`.\n  Backbone.VERSION = '1.3.3';\n\n  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns\n  // the `$` variable.\n  Backbone.$ = $;\n\n  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable\n  // to its previous owner. Returns a reference to this Backbone object.\n  Backbone.noConflict = function() {\n    root.Backbone = previousBackbone;\n    return this;\n  };\n\n  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option\n  // will fake `\"PATCH\"`, `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and\n  // set a `X-Http-Method-Override` header.\n  Backbone.emulateHTTP = false;\n\n  // Turn on `emulateJSON` to support legacy servers that can't deal with direct\n  // `application/json` requests ... this will encode the body as\n  // `application/x-www-form-urlencoded` instead and will send the model in a\n  // form param named `model`.\n  Backbone.emulateJSON = false;\n\n  // Proxy Backbone class methods to Underscore functions, wrapping the model's\n  // `attributes` object or collection's `models` array behind the scenes.\n  //\n  // collection.filter(function(model) { return model.get('age') > 10 });\n  // collection.each(this.addView);\n  //\n  // `Function#apply` can be slow so we use the method's arg count, if we know it.\n  var addMethod = function(length, method, attribute) {\n    switch (length) {\n      case 1: return function() {\n        return _[method](this[attribute]);\n      };\n      case 2: return function(value) {\n        return _[method](this[attribute], value);\n      };\n      case 3: return function(iteratee, context) {\n        return _[method](this[attribute], cb(iteratee, this), context);\n      };\n      case 4: return function(iteratee, defaultVal, context) {\n        return _[method](this[attribute], cb(iteratee, this), defaultVal, context);\n      };\n      default: return function() {\n        var args = slice.call(arguments);\n        args.unshift(this[attribute]);\n        return _[method].apply(_, args);\n      };\n    }\n  };\n  var addUnderscoreMethods = function(Class, methods, attribute) {\n    _.each(methods, function(length, method) {\n      if (_[method]) Class.prototype[method] = addMethod(length, method, attribute);\n    });\n  };\n\n  // Support `collection.sortBy('attr')` and `collection.findWhere({id: 1})`.\n  var cb = function(iteratee, instance) {\n    if (_.isFunction(iteratee)) return iteratee;\n    if (_.isObject(iteratee) && !instance._isModel(iteratee)) return modelMatcher(iteratee);\n    if (_.isString(iteratee)) return function(model) { return model.get(iteratee); };\n    return iteratee;\n  };\n  var modelMatcher = function(attrs) {\n    var matcher = _.matches(attrs);\n    return function(model) {\n      return matcher(model.attributes);\n    };\n  };\n\n  // Backbone.Events\n  // ---------------\n\n  // A module that can be mixed in to *any object* in order to provide it with\n  // a custom event channel. You may bind a callback to an event with `on` or\n  // remove with `off`; `trigger`-ing an event fires all callbacks in\n  // succession.\n  //\n  //     var object = {};\n  //     _.extend(object, Backbone.Events);\n  //     object.on('expand', function(){ alert('expanded'); });\n  //     object.trigger('expand');\n  //\n  var Events = Backbone.Events = {};\n\n  // Regular expression used to split event strings.\n  var eventSplitter = /\\s+/;\n\n  // Iterates over the standard `event, callback` (as well as the fancy multiple\n  // space-separated events `\"change blur\", callback` and jQuery-style event\n  // maps `{event: callback}`).\n  var eventsApi = function(iteratee, events, name, callback, opts) {\n    var i = 0, names;\n    if (name && typeof name === 'object') {\n      // Handle event maps.\n      if (callback !== void 0 && 'context' in opts && opts.context === void 0) opts.context = callback;\n      for (names = _.keys(name); i < names.length ; i++) {\n        events = eventsApi(iteratee, events, names[i], name[names[i]], opts);\n      }\n    } else if (name && eventSplitter.test(name)) {\n      // Handle space-separated event names by delegating them individually.\n      for (names = name.split(eventSplitter); i < names.length; i++) {\n        events = iteratee(events, names[i], callback, opts);\n      }\n    } else {\n      // Finally, standard events.\n      events = iteratee(events, name, callback, opts);\n    }\n    return events;\n  };\n\n  // Bind an event to a `callback` function. Passing `\"all\"` will bind\n  // the callback to all events fired.\n  Events.on = function(name, callback, context) {\n    return internalOn(this, name, callback, context);\n  };\n\n  // Guard the `listening` argument from the public API.\n  var internalOn = function(obj, name, callback, context, listening) {\n    obj._events = eventsApi(onApi, obj._events || {}, name, callback, {\n      context: context,\n      ctx: obj,\n      listening: listening\n    });\n\n    if (listening) {\n      var listeners = obj._listeners || (obj._listeners = {});\n      listeners[listening.id] = listening;\n    }\n\n    return obj;\n  };\n\n  // Inversion-of-control versions of `on`. Tell *this* object to listen to\n  // an event in another object... keeping track of what it's listening to\n  // for easier unbinding later.\n  Events.listenTo = function(obj, name, callback) {\n    if (!obj) return this;\n    var id = obj._listenId || (obj._listenId = _.uniqueId('l'));\n    var listeningTo = this._listeningTo || (this._listeningTo = {});\n    var listening = listeningTo[id];\n\n    // This object is not listening to any other events on `obj` yet.\n    // Setup the necessary references to track the listening callbacks.\n    if (!listening) {\n      var thisId = this._listenId || (this._listenId = _.uniqueId('l'));\n      listening = listeningTo[id] = {obj: obj, objId: id, id: thisId, listeningTo: listeningTo, count: 0};\n    }\n\n    // Bind callbacks on obj, and keep track of them on listening.\n    internalOn(obj, name, callback, this, listening);\n    return this;\n  };\n\n  // The reducing API that adds a callback to the `events` object.\n  var onApi = function(events, name, callback, options) {\n    if (callback) {\n      var handlers = events[name] || (events[name] = []);\n      var context = options.context, ctx = options.ctx, listening = options.listening;\n      if (listening) listening.count++;\n\n      handlers.push({callback: callback, context: context, ctx: context || ctx, listening: listening});\n    }\n    return events;\n  };\n\n  // Remove one or many callbacks. If `context` is null, removes all\n  // callbacks with that function. If `callback` is null, removes all\n  // callbacks for the event. If `name` is null, removes all bound\n  // callbacks for all events.\n  Events.off = function(name, callback, context) {\n    if (!this._events) return this;\n    this._events = eventsApi(offApi, this._events, name, callback, {\n      context: context,\n      listeners: this._listeners\n    });\n    return this;\n  };\n\n  // Tell this object to stop listening to either specific events ... or\n  // to every object it's currently listening to.\n  Events.stopListening = function(obj, name, callback) {\n    var listeningTo = this._listeningTo;\n    if (!listeningTo) return this;\n\n    var ids = obj ? [obj._listenId] : _.keys(listeningTo);\n\n    for (var i = 0; i < ids.length; i++) {\n      var listening = listeningTo[ids[i]];\n\n      // If listening doesn't exist, this object is not currently\n      // listening to obj. Break out early.\n      if (!listening) break;\n\n      listening.obj.off(name, callback, this);\n    }\n\n    return this;\n  };\n\n  // The reducing API that removes a callback from the `events` object.\n  var offApi = function(events, name, callback, options) {\n    if (!events) return;\n\n    var i = 0, listening;\n    var context = options.context, listeners = options.listeners;\n\n    // Delete all events listeners and \"drop\" events.\n    if (!name && !callback && !context) {\n      var ids = _.keys(listeners);\n      for (; i < ids.length; i++) {\n        listening = listeners[ids[i]];\n        delete listeners[listening.id];\n        delete listening.listeningTo[listening.objId];\n      }\n      return;\n    }\n\n    var names = name ? [name] : _.keys(events);\n    for (; i < names.length; i++) {\n      name = names[i];\n      var handlers = events[name];\n\n      // Bail out if there are no events stored.\n      if (!handlers) break;\n\n      // Replace events if there are any remaining.  Otherwise, clean up.\n      var remaining = [];\n      for (var j = 0; j < handlers.length; j++) {\n        var handler = handlers[j];\n        if (\n          callback && callback !== handler.callback &&\n            callback !== handler.callback._callback ||\n              context && context !== handler.context\n        ) {\n          remaining.push(handler);\n        } else {\n          listening = handler.listening;\n          if (listening && --listening.count === 0) {\n            delete listeners[listening.id];\n            delete listening.listeningTo[listening.objId];\n          }\n        }\n      }\n\n      // Update tail event if the list has any events.  Otherwise, clean up.\n      if (remaining.length) {\n        events[name] = remaining;\n      } else {\n        delete events[name];\n      }\n    }\n    return events;\n  };\n\n  // Bind an event to only be triggered a single time. After the first time\n  // the callback is invoked, its listener will be removed. If multiple events\n  // are passed in using the space-separated syntax, the handler will fire\n  // once for each event, not once for a combination of all events.\n  Events.once = function(name, callback, context) {\n    // Map the event into a `{event: once}` object.\n    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.off, this));\n    if (typeof name === 'string' && context == null) callback = void 0;\n    return this.on(events, callback, context);\n  };\n\n  // Inversion-of-control versions of `once`.\n  Events.listenToOnce = function(obj, name, callback) {\n    // Map the event into a `{event: once}` object.\n    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.stopListening, this, obj));\n    return this.listenTo(obj, events);\n  };\n\n  // Reduces the event callbacks into a map of `{event: onceWrapper}`.\n  // `offer` unbinds the `onceWrapper` after it has been called.\n  var onceMap = function(map, name, callback, offer) {\n    if (callback) {\n      var once = map[name] = _.once(function() {\n        offer(name, once);\n        callback.apply(this, arguments);\n      });\n      once._callback = callback;\n    }\n    return map;\n  };\n\n  // Trigger one or many events, firing all bound callbacks. Callbacks are\n  // passed the same arguments as `trigger` is, apart from the event name\n  // (unless you're listening on `\"all\"`, which will cause your callback to\n  // receive the true name of the event as the first argument).\n  Events.trigger = function(name) {\n    if (!this._events) return this;\n\n    var length = Math.max(0, arguments.length - 1);\n    var args = Array(length);\n    for (var i = 0; i < length; i++) args[i] = arguments[i + 1];\n\n    eventsApi(triggerApi, this._events, name, void 0, args);\n    return this;\n  };\n\n  // Handles triggering the appropriate event callbacks.\n  var triggerApi = function(objEvents, name, callback, args) {\n    if (objEvents) {\n      var events = objEvents[name];\n      var allEvents = objEvents.all;\n      if (events && allEvents) allEvents = allEvents.slice();\n      if (events) triggerEvents(events, args);\n      if (allEvents) triggerEvents(allEvents, [name].concat(args));\n    }\n    return objEvents;\n  };\n\n  // A difficult-to-believe, but optimized internal dispatch function for\n  // triggering events. Tries to keep the usual cases speedy (most internal\n  // Backbone events have 3 arguments).\n  var triggerEvents = function(events, args) {\n    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];\n    switch (args.length) {\n      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;\n      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;\n      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;\n      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;\n      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;\n    }\n  };\n\n  // Aliases for backwards compatibility.\n  Events.bind   = Events.on;\n  Events.unbind = Events.off;\n\n  // Allow the `Backbone` object to serve as a global event bus, for folks who\n  // want global \"pubsub\" in a convenient place.\n  _.extend(Backbone, Events);\n\n  // Backbone.Model\n  // --------------\n\n  // Backbone **Models** are the basic data object in the framework --\n  // frequently representing a row in a table in a database on your server.\n  // A discrete chunk of data and a bunch of useful, related methods for\n  // performing computations and transformations on that data.\n\n  // Create a new model with the specified attributes. A client id (`cid`)\n  // is automatically generated and assigned for you.\n  var Model = Backbone.Model = function(attributes, options) {\n    var attrs = attributes || {};\n    options || (options = {});\n    this.cid = _.uniqueId(this.cidPrefix);\n    this.attributes = {};\n    if (options.collection) this.collection = options.collection;\n    if (options.parse) attrs = this.parse(attrs, options) || {};\n    var defaults = _.result(this, 'defaults');\n    attrs = _.defaults(_.extend({}, defaults, attrs), defaults);\n    this.set(attrs, options);\n    this.changed = {};\n    this.initialize.apply(this, arguments);\n  };\n\n  // Attach all inheritable methods to the Model prototype.\n  _.extend(Model.prototype, Events, {\n\n    // A hash of attributes whose current and previous value differ.\n    changed: null,\n\n    // The value returned during the last failed validation.\n    validationError: null,\n\n    // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\n    // CouchDB users may want to set this to `\"_id\"`.\n    idAttribute: 'id',\n\n    // The prefix is used to create the client id which is used to identify models locally.\n    // You may want to override this if you're experiencing name clashes with model ids.\n    cidPrefix: 'c',\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // Return a copy of the model's `attributes` object.\n    toJSON: function(options) {\n      return _.clone(this.attributes);\n    },\n\n    // Proxy `Backbone.sync` by default -- but override this if you need\n    // custom syncing semantics for *this* particular model.\n    sync: function() {\n      return Backbone.sync.apply(this, arguments);\n    },\n\n    // Get the value of an attribute.\n    get: function(attr) {\n      return this.attributes[attr];\n    },\n\n    // Get the HTML-escaped value of an attribute.\n    escape: function(attr) {\n      return _.escape(this.get(attr));\n    },\n\n    // Returns `true` if the attribute contains a value that is not null\n    // or undefined.\n    has: function(attr) {\n      return this.get(attr) != null;\n    },\n\n    // Special-cased proxy to underscore's `_.matches` method.\n    matches: function(attrs) {\n      return !!_.iteratee(attrs, this)(this.attributes);\n    },\n\n    // Set a hash of model attributes on the object, firing `\"change\"`. This is\n    // the core primitive operation of a model, updating the data and notifying\n    // anyone who needs to know about the change in state. The heart of the beast.\n    set: function(key, val, options) {\n      if (key == null) return this;\n\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      var attrs;\n      if (typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options || (options = {});\n\n      // Run validation.\n      if (!this._validate(attrs, options)) return false;\n\n      // Extract attributes and options.\n      var unset      = options.unset;\n      var silent     = options.silent;\n      var changes    = [];\n      var changing   = this._changing;\n      this._changing = true;\n\n      if (!changing) {\n        this._previousAttributes = _.clone(this.attributes);\n        this.changed = {};\n      }\n\n      var current = this.attributes;\n      var changed = this.changed;\n      var prev    = this._previousAttributes;\n\n      // For each `set` attribute, update or delete the current value.\n      for (var attr in attrs) {\n        val = attrs[attr];\n        if (!_.isEqual(current[attr], val)) changes.push(attr);\n        if (!_.isEqual(prev[attr], val)) {\n          changed[attr] = val;\n        } else {\n          delete changed[attr];\n        }\n        unset ? delete current[attr] : current[attr] = val;\n      }\n\n      // Update the `id`.\n      if (this.idAttribute in attrs) this.id = this.get(this.idAttribute);\n\n      // Trigger all relevant attribute changes.\n      if (!silent) {\n        if (changes.length) this._pending = options;\n        for (var i = 0; i < changes.length; i++) {\n          this.trigger('change:' + changes[i], this, current[changes[i]], options);\n        }\n      }\n\n      // You might be wondering why there's a `while` loop here. Changes can\n      // be recursively nested within `\"change\"` events.\n      if (changing) return this;\n      if (!silent) {\n        while (this._pending) {\n          options = this._pending;\n          this._pending = false;\n          this.trigger('change', this, options);\n        }\n      }\n      this._pending = false;\n      this._changing = false;\n      return this;\n    },\n\n    // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\n    // if the attribute doesn't exist.\n    unset: function(attr, options) {\n      return this.set(attr, void 0, _.extend({}, options, {unset: true}));\n    },\n\n    // Clear all attributes on the model, firing `\"change\"`.\n    clear: function(options) {\n      var attrs = {};\n      for (var key in this.attributes) attrs[key] = void 0;\n      return this.set(attrs, _.extend({}, options, {unset: true}));\n    },\n\n    // Determine if the model has changed since the last `\"change\"` event.\n    // If you specify an attribute name, determine if that attribute has changed.\n    hasChanged: function(attr) {\n      if (attr == null) return !_.isEmpty(this.changed);\n      return _.has(this.changed, attr);\n    },\n\n    // Return an object containing all the attributes that have changed, or\n    // false if there are no changed attributes. Useful for determining what\n    // parts of a view need to be updated and/or what attributes need to be\n    // persisted to the server. Unset attributes will be set to undefined.\n    // You can also pass an attributes object to diff against the model,\n    // determining if there *would be* a change.\n    changedAttributes: function(diff) {\n      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;\n      var old = this._changing ? this._previousAttributes : this.attributes;\n      var changed = {};\n      for (var attr in diff) {\n        var val = diff[attr];\n        if (_.isEqual(old[attr], val)) continue;\n        changed[attr] = val;\n      }\n      return _.size(changed) ? changed : false;\n    },\n\n    // Get the previous value of an attribute, recorded at the time the last\n    // `\"change\"` event was fired.\n    previous: function(attr) {\n      if (attr == null || !this._previousAttributes) return null;\n      return this._previousAttributes[attr];\n    },\n\n    // Get all of the attributes of the model at the time of the previous\n    // `\"change\"` event.\n    previousAttributes: function() {\n      return _.clone(this._previousAttributes);\n    },\n\n    // Fetch the model from the server, merging the response with the model's\n    // local attributes. Any changed attributes will trigger a \"change\" event.\n    fetch: function(options) {\n      options = _.extend({parse: true}, options);\n      var model = this;\n      var success = options.success;\n      options.success = function(resp) {\n        var serverAttrs = options.parse ? model.parse(resp, options) : resp;\n        if (!model.set(serverAttrs, options)) return false;\n        if (success) success.call(options.context, model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n\n    // Set a hash of model attributes, and sync the model to the server.\n    // If the server returns an attributes hash that differs, the model's\n    // state will be `set` again.\n    save: function(key, val, options) {\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      var attrs;\n      if (key == null || typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options = _.extend({validate: true, parse: true}, options);\n      var wait = options.wait;\n\n      // If we're not waiting and attributes exist, save acts as\n      // `set(attr).save(null, opts)` with validation. Otherwise, check if\n      // the model will be valid when the attributes, if any, are set.\n      if (attrs && !wait) {\n        if (!this.set(attrs, options)) return false;\n      } else if (!this._validate(attrs, options)) {\n        return false;\n      }\n\n      // After a successful server-side save, the client is (optionally)\n      // updated with the server-side state.\n      var model = this;\n      var success = options.success;\n      var attributes = this.attributes;\n      options.success = function(resp) {\n        // Ensure attributes are restored during synchronous saves.\n        model.attributes = attributes;\n        var serverAttrs = options.parse ? model.parse(resp, options) : resp;\n        if (wait) serverAttrs = _.extend({}, attrs, serverAttrs);\n        if (serverAttrs && !model.set(serverAttrs, options)) return false;\n        if (success) success.call(options.context, model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n      wrapError(this, options);\n\n      // Set temporary attributes if `{wait: true}` to properly find new ids.\n      if (attrs && wait) this.attributes = _.extend({}, attributes, attrs);\n\n      var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\n      if (method === 'patch' && !options.attrs) options.attrs = attrs;\n      var xhr = this.sync(method, this, options);\n\n      // Restore attributes.\n      this.attributes = attributes;\n\n      return xhr;\n    },\n\n    // Destroy this model on the server if it was already persisted.\n    // Optimistically removes the model from its collection, if it has one.\n    // If `wait: true` is passed, waits for the server to respond before removal.\n    destroy: function(options) {\n      options = options ? _.clone(options) : {};\n      var model = this;\n      var success = options.success;\n      var wait = options.wait;\n\n      var destroy = function() {\n        model.stopListening();\n        model.trigger('destroy', model, model.collection, options);\n      };\n\n      options.success = function(resp) {\n        if (wait) destroy();\n        if (success) success.call(options.context, model, resp, options);\n        if (!model.isNew()) model.trigger('sync', model, resp, options);\n      };\n\n      var xhr = false;\n      if (this.isNew()) {\n        _.defer(options.success);\n      } else {\n        wrapError(this, options);\n        xhr = this.sync('delete', this, options);\n      }\n      if (!wait) destroy();\n      return xhr;\n    },\n\n    // Default URL for the model's representation on the server -- if you're\n    // using Backbone's restful methods, override this to change the endpoint\n    // that will be called.\n    url: function() {\n      var base =\n        _.result(this, 'urlRoot') ||\n        _.result(this.collection, 'url') ||\n        urlError();\n      if (this.isNew()) return base;\n      var id = this.get(this.idAttribute);\n      return base.replace(/[^\\/]$/, '$&/') + encodeURIComponent(id);\n    },\n\n    // **parse** converts a response into the hash of attributes to be `set` on\n    // the model. The default implementation is just to pass the response along.\n    parse: function(resp, options) {\n      return resp;\n    },\n\n    // Create a new model with identical attributes to this one.\n    clone: function() {\n      return new this.constructor(this.attributes);\n    },\n\n    // A model is new if it has never been saved to the server, and lacks an id.\n    isNew: function() {\n      return !this.has(this.idAttribute);\n    },\n\n    // Check if the model is currently in a valid state.\n    isValid: function(options) {\n      return this._validate({}, _.extend({}, options, {validate: true}));\n    },\n\n    // Run validation against the next complete set of model attributes,\n    // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\n    _validate: function(attrs, options) {\n      if (!options.validate || !this.validate) return true;\n      attrs = _.extend({}, this.attributes, attrs);\n      var error = this.validationError = this.validate(attrs, options) || null;\n      if (!error) return true;\n      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));\n      return false;\n    }\n\n  });\n\n  // Underscore methods that we want to implement on the Model, mapped to the\n  // number of arguments they take.\n  var modelMethods = {keys: 1, values: 1, pairs: 1, invert: 1, pick: 0,\n      omit: 0, chain: 1, isEmpty: 1};\n\n  // Mix in each Underscore method as a proxy to `Model#attributes`.\n  addUnderscoreMethods(Model, modelMethods, 'attributes');\n\n  // Backbone.Collection\n  // -------------------\n\n  // If models tend to represent a single row of data, a Backbone Collection is\n  // more analogous to a table full of data ... or a small slice or page of that\n  // table, or a collection of rows that belong together for a particular reason\n  // -- all of the messages in this particular folder, all of the documents\n  // belonging to this particular author, and so on. Collections maintain\n  // indexes of their models, both in order, and for lookup by `id`.\n\n  // Create a new **Collection**, perhaps to contain a specific type of `model`.\n  // If a `comparator` is specified, the Collection will maintain\n  // its models in sort order, as they're added and removed.\n  var Collection = Backbone.Collection = function(models, options) {\n    options || (options = {});\n    if (options.model) this.model = options.model;\n    if (options.comparator !== void 0) this.comparator = options.comparator;\n    this._reset();\n    this.initialize.apply(this, arguments);\n    if (models) this.reset(models, _.extend({silent: true}, options));\n  };\n\n  // Default options for `Collection#set`.\n  var setOptions = {add: true, remove: true, merge: true};\n  var addOptions = {add: true, remove: false};\n\n  // Splices `insert` into `array` at index `at`.\n  var splice = function(array, insert, at) {\n    at = Math.min(Math.max(at, 0), array.length);\n    var tail = Array(array.length - at);\n    var length = insert.length;\n    var i;\n    for (i = 0; i < tail.length; i++) tail[i] = array[i + at];\n    for (i = 0; i < length; i++) array[i + at] = insert[i];\n    for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];\n  };\n\n  // Define the Collection's inheritable methods.\n  _.extend(Collection.prototype, Events, {\n\n    // The default model for a collection is just a **Backbone.Model**.\n    // This should be overridden in most cases.\n    model: Model,\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // The JSON representation of a Collection is an array of the\n    // models' attributes.\n    toJSON: function(options) {\n      return this.map(function(model) { return model.toJSON(options); });\n    },\n\n    // Proxy `Backbone.sync` by default.\n    sync: function() {\n      return Backbone.sync.apply(this, arguments);\n    },\n\n    // Add a model, or list of models to the set. `models` may be Backbone\n    // Models or raw JavaScript objects to be converted to Models, or any\n    // combination of the two.\n    add: function(models, options) {\n      return this.set(models, _.extend({merge: false}, options, addOptions));\n    },\n\n    // Remove a model, or a list of models from the set.\n    remove: function(models, options) {\n      options = _.extend({}, options);\n      var singular = !_.isArray(models);\n      models = singular ? [models] : models.slice();\n      var removed = this._removeModels(models, options);\n      if (!options.silent && removed.length) {\n        options.changes = {added: [], merged: [], removed: removed};\n        this.trigger('update', this, options);\n      }\n      return singular ? removed[0] : removed;\n    },\n\n    // Update a collection by `set`-ing a new list of models, adding new ones,\n    // removing models that are no longer present, and merging models that\n    // already exist in the collection, as necessary. Similar to **Model#set**,\n    // the core operation for updating the data contained by the collection.\n    set: function(models, options) {\n      if (models == null) return;\n\n      options = _.extend({}, setOptions, options);\n      if (options.parse && !this._isModel(models)) {\n        models = this.parse(models, options) || [];\n      }\n\n      var singular = !_.isArray(models);\n      models = singular ? [models] : models.slice();\n\n      var at = options.at;\n      if (at != null) at = +at;\n      if (at > this.length) at = this.length;\n      if (at < 0) at += this.length + 1;\n\n      var set = [];\n      var toAdd = [];\n      var toMerge = [];\n      var toRemove = [];\n      var modelMap = {};\n\n      var add = options.add;\n      var merge = options.merge;\n      var remove = options.remove;\n\n      var sort = false;\n      var sortable = this.comparator && at == null && options.sort !== false;\n      var sortAttr = _.isString(this.comparator) ? this.comparator : null;\n\n      // Turn bare objects into model references, and prevent invalid models\n      // from being added.\n      var model, i;\n      for (i = 0; i < models.length; i++) {\n        model = models[i];\n\n        // If a duplicate is found, prevent it from being added and\n        // optionally merge it into the existing model.\n        var existing = this.get(model);\n        if (existing) {\n          if (merge && model !== existing) {\n            var attrs = this._isModel(model) ? model.attributes : model;\n            if (options.parse) attrs = existing.parse(attrs, options);\n            existing.set(attrs, options);\n            toMerge.push(existing);\n            if (sortable && !sort) sort = existing.hasChanged(sortAttr);\n          }\n          if (!modelMap[existing.cid]) {\n            modelMap[existing.cid] = true;\n            set.push(existing);\n          }\n          models[i] = existing;\n\n        // If this is a new, valid model, push it to the `toAdd` list.\n        } else if (add) {\n          model = models[i] = this._prepareModel(model, options);\n          if (model) {\n            toAdd.push(model);\n            this._addReference(model, options);\n            modelMap[model.cid] = true;\n            set.push(model);\n          }\n        }\n      }\n\n      // Remove stale models.\n      if (remove) {\n        for (i = 0; i < this.length; i++) {\n          model = this.models[i];\n          if (!modelMap[model.cid]) toRemove.push(model);\n        }\n        if (toRemove.length) this._removeModels(toRemove, options);\n      }\n\n      // See if sorting is needed, update `length` and splice in new models.\n      var orderChanged = false;\n      var replace = !sortable && add && remove;\n      if (set.length && replace) {\n        orderChanged = this.length !== set.length || _.some(this.models, function(m, index) {\n          return m !== set[index];\n        });\n        this.models.length = 0;\n        splice(this.models, set, 0);\n        this.length = this.models.length;\n      } else if (toAdd.length) {\n        if (sortable) sort = true;\n        splice(this.models, toAdd, at == null ? this.length : at);\n        this.length = this.models.length;\n      }\n\n      // Silently sort the collection if appropriate.\n      if (sort) this.sort({silent: true});\n\n      // Unless silenced, it's time to fire all appropriate add/sort/update events.\n      if (!options.silent) {\n        for (i = 0; i < toAdd.length; i++) {\n          if (at != null) options.index = at + i;\n          model = toAdd[i];\n          model.trigger('add', model, this, options);\n        }\n        if (sort || orderChanged) this.trigger('sort', this, options);\n        if (toAdd.length || toRemove.length || toMerge.length) {\n          options.changes = {\n            added: toAdd,\n            removed: toRemove,\n            merged: toMerge\n          };\n          this.trigger('update', this, options);\n        }\n      }\n\n      // Return the added (or merged) model (or models).\n      return singular ? models[0] : models;\n    },\n\n    // When you have more items than you want to add or remove individually,\n    // you can reset the entire set with a new list of models, without firing\n    // any granular `add` or `remove` events. Fires `reset` when finished.\n    // Useful for bulk operations and optimizations.\n    reset: function(models, options) {\n      options = options ? _.clone(options) : {};\n      for (var i = 0; i < this.models.length; i++) {\n        this._removeReference(this.models[i], options);\n      }\n      options.previousModels = this.models;\n      this._reset();\n      models = this.add(models, _.extend({silent: true}, options));\n      if (!options.silent) this.trigger('reset', this, options);\n      return models;\n    },\n\n    // Add a model to the end of the collection.\n    push: function(model, options) {\n      return this.add(model, _.extend({at: this.length}, options));\n    },\n\n    // Remove a model from the end of the collection.\n    pop: function(options) {\n      var model = this.at(this.length - 1);\n      return this.remove(model, options);\n    },\n\n    // Add a model to the beginning of the collection.\n    unshift: function(model, options) {\n      return this.add(model, _.extend({at: 0}, options));\n    },\n\n    // Remove a model from the beginning of the collection.\n    shift: function(options) {\n      var model = this.at(0);\n      return this.remove(model, options);\n    },\n\n    // Slice out a sub-array of models from the collection.\n    slice: function() {\n      return slice.apply(this.models, arguments);\n    },\n\n    // Get a model from the set by id, cid, model object with id or cid\n    // properties, or an attributes object that is transformed through modelId.\n    get: function(obj) {\n      if (obj == null) return void 0;\n      return this._byId[obj] ||\n        this._byId[this.modelId(obj.attributes || obj)] ||\n        obj.cid && this._byId[obj.cid];\n    },\n\n    // Returns `true` if the model is in the collection.\n    has: function(obj) {\n      return this.get(obj) != null;\n    },\n\n    // Get the model at the given index.\n    at: function(index) {\n      if (index < 0) index += this.length;\n      return this.models[index];\n    },\n\n    // Return models with matching attributes. Useful for simple cases of\n    // `filter`.\n    where: function(attrs, first) {\n      return this[first ? 'find' : 'filter'](attrs);\n    },\n\n    // Return the first model with matching attributes. Useful for simple cases\n    // of `find`.\n    findWhere: function(attrs) {\n      return this.where(attrs, true);\n    },\n\n    // Force the collection to re-sort itself. You don't need to call this under\n    // normal circumstances, as the set will maintain sort order as each item\n    // is added.\n    sort: function(options) {\n      var comparator = this.comparator;\n      if (!comparator) throw new Error('Cannot sort a set without a comparator');\n      options || (options = {});\n\n      var length = comparator.length;\n      if (_.isFunction(comparator)) comparator = _.bind(comparator, this);\n\n      // Run sort based on type of `comparator`.\n      if (length === 1 || _.isString(comparator)) {\n        this.models = this.sortBy(comparator);\n      } else {\n        this.models.sort(comparator);\n      }\n      if (!options.silent) this.trigger('sort', this, options);\n      return this;\n    },\n\n    // Pluck an attribute from each model in the collection.\n    pluck: function(attr) {\n      return this.map(attr + '');\n    },\n\n    // Fetch the default set of models for this collection, resetting the\n    // collection when they arrive. If `reset: true` is passed, the response\n    // data will be passed through the `reset` method instead of `set`.\n    fetch: function(options) {\n      options = _.extend({parse: true}, options);\n      var success = options.success;\n      var collection = this;\n      options.success = function(resp) {\n        var method = options.reset ? 'reset' : 'set';\n        collection[method](resp, options);\n        if (success) success.call(options.context, collection, resp, options);\n        collection.trigger('sync', collection, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n\n    // Create a new instance of a model in this collection. Add the model to the\n    // collection immediately, unless `wait: true` is passed, in which case we\n    // wait for the server to agree.\n    create: function(model, options) {\n      options = options ? _.clone(options) : {};\n      var wait = options.wait;\n      model = this._prepareModel(model, options);\n      if (!model) return false;\n      if (!wait) this.add(model, options);\n      var collection = this;\n      var success = options.success;\n      options.success = function(m, resp, callbackOpts) {\n        if (wait) collection.add(m, callbackOpts);\n        if (success) success.call(callbackOpts.context, m, resp, callbackOpts);\n      };\n      model.save(null, options);\n      return model;\n    },\n\n    // **parse** converts a response into a list of models to be added to the\n    // collection. The default implementation is just to pass it through.\n    parse: function(resp, options) {\n      return resp;\n    },\n\n    // Create a new collection with an identical list of models as this one.\n    clone: function() {\n      return new this.constructor(this.models, {\n        model: this.model,\n        comparator: this.comparator\n      });\n    },\n\n    // Define how to uniquely identify models in the collection.\n    modelId: function(attrs) {\n      return attrs[this.model.prototype.idAttribute || 'id'];\n    },\n\n    // Private method to reset all internal state. Called when the collection\n    // is first initialized or reset.\n    _reset: function() {\n      this.length = 0;\n      this.models = [];\n      this._byId  = {};\n    },\n\n    // Prepare a hash of attributes (or other model) to be added to this\n    // collection.\n    _prepareModel: function(attrs, options) {\n      if (this._isModel(attrs)) {\n        if (!attrs.collection) attrs.collection = this;\n        return attrs;\n      }\n      options = options ? _.clone(options) : {};\n      options.collection = this;\n      var model = new this.model(attrs, options);\n      if (!model.validationError) return model;\n      this.trigger('invalid', this, model.validationError, options);\n      return false;\n    },\n\n    // Internal method called by both remove and set.\n    _removeModels: function(models, options) {\n      var removed = [];\n      for (var i = 0; i < models.length; i++) {\n        var model = this.get(models[i]);\n        if (!model) continue;\n\n        var index = this.indexOf(model);\n        this.models.splice(index, 1);\n        this.length--;\n\n        // Remove references before triggering 'remove' event to prevent an\n        // infinite loop. #3693\n        delete this._byId[model.cid];\n        var id = this.modelId(model.attributes);\n        if (id != null) delete this._byId[id];\n\n        if (!options.silent) {\n          options.index = index;\n          model.trigger('remove', model, this, options);\n        }\n\n        removed.push(model);\n        this._removeReference(model, options);\n      }\n      return removed;\n    },\n\n    // Method for checking whether an object should be considered a model for\n    // the purposes of adding to the collection.\n    _isModel: function(model) {\n      return model instanceof Model;\n    },\n\n    // Internal method to create a model's ties to a collection.\n    _addReference: function(model, options) {\n      this._byId[model.cid] = model;\n      var id = this.modelId(model.attributes);\n      if (id != null) this._byId[id] = model;\n      model.on('all', this._onModelEvent, this);\n    },\n\n    // Internal method to sever a model's ties to a collection.\n    _removeReference: function(model, options) {\n      delete this._byId[model.cid];\n      var id = this.modelId(model.attributes);\n      if (id != null) delete this._byId[id];\n      if (this === model.collection) delete model.collection;\n      model.off('all', this._onModelEvent, this);\n    },\n\n    // Internal method called every time a model in the set fires an event.\n    // Sets need to update their indexes when models change ids. All other\n    // events simply proxy through. \"add\" and \"remove\" events that originate\n    // in other collections are ignored.\n    _onModelEvent: function(event, model, collection, options) {\n      if (model) {\n        if ((event === 'add' || event === 'remove') && collection !== this) return;\n        if (event === 'destroy') this.remove(model, options);\n        if (event === 'change') {\n          var prevId = this.modelId(model.previousAttributes());\n          var id = this.modelId(model.attributes);\n          if (prevId !== id) {\n            if (prevId != null) delete this._byId[prevId];\n            if (id != null) this._byId[id] = model;\n          }\n        }\n      }\n      this.trigger.apply(this, arguments);\n    }\n\n  });\n\n  // Underscore methods that we want to implement on the Collection.\n  // 90% of the core usefulness of Backbone Collections is actually implemented\n  // right here:\n  var collectionMethods = {forEach: 3, each: 3, map: 3, collect: 3, reduce: 0,\n      foldl: 0, inject: 0, reduceRight: 0, foldr: 0, find: 3, detect: 3, filter: 3,\n      select: 3, reject: 3, every: 3, all: 3, some: 3, any: 3, include: 3, includes: 3,\n      contains: 3, invoke: 0, max: 3, min: 3, toArray: 1, size: 1, first: 3,\n      head: 3, take: 3, initial: 3, rest: 3, tail: 3, drop: 3, last: 3,\n      without: 0, difference: 0, indexOf: 3, shuffle: 1, lastIndexOf: 3,\n      isEmpty: 1, chain: 1, sample: 3, partition: 3, groupBy: 3, countBy: 3,\n      sortBy: 3, indexBy: 3, findIndex: 3, findLastIndex: 3};\n\n  // Mix in each Underscore method as a proxy to `Collection#models`.\n  addUnderscoreMethods(Collection, collectionMethods, 'models');\n\n  // Backbone.View\n  // -------------\n\n  // Backbone Views are almost more convention than they are actual code. A View\n  // is simply a JavaScript object that represents a logical chunk of UI in the\n  // DOM. This might be a single item, an entire list, a sidebar or panel, or\n  // even the surrounding frame which wraps your whole app. Defining a chunk of\n  // UI as a **View** allows you to define your DOM events declaratively, without\n  // having to worry about render order ... and makes it easy for the view to\n  // react to specific changes in the state of your models.\n\n  // Creating a Backbone.View creates its initial element outside of the DOM,\n  // if an existing element is not provided...\n  var View = Backbone.View = function(options) {\n    this.cid = _.uniqueId('view');\n    _.extend(this, _.pick(options, viewOptions));\n    this._ensureElement();\n    this.initialize.apply(this, arguments);\n  };\n\n  // Cached regex to split keys for `delegate`.\n  var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n  // List of view options to be set as properties.\n  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];\n\n  // Set up all inheritable **Backbone.View** properties and methods.\n  _.extend(View.prototype, Events, {\n\n    // The default `tagName` of a View's element is `\"div\"`.\n    tagName: 'div',\n\n    // jQuery delegate for element lookup, scoped to DOM elements within the\n    // current view. This should be preferred to global lookups where possible.\n    $: function(selector) {\n      return this.$el.find(selector);\n    },\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // **render** is the core function that your view should override, in order\n    // to populate its element (`this.el`), with the appropriate HTML. The\n    // convention is for **render** to always return `this`.\n    render: function() {\n      return this;\n    },\n\n    // Remove this view by taking the element out of the DOM, and removing any\n    // applicable Backbone.Events listeners.\n    remove: function() {\n      this._removeElement();\n      this.stopListening();\n      return this;\n    },\n\n    // Remove this view's element from the document and all event listeners\n    // attached to it. Exposed for subclasses using an alternative DOM\n    // manipulation API.\n    _removeElement: function() {\n      this.$el.remove();\n    },\n\n    // Change the view's element (`this.el` property) and re-delegate the\n    // view's events on the new element.\n    setElement: function(element) {\n      this.undelegateEvents();\n      this._setElement(element);\n      this.delegateEvents();\n      return this;\n    },\n\n    // Creates the `this.el` and `this.$el` references for this view using the\n    // given `el`. `el` can be a CSS selector or an HTML string, a jQuery\n    // context or an element. Subclasses can override this to utilize an\n    // alternative DOM manipulation API and are only required to set the\n    // `this.el` property.\n    _setElement: function(el) {\n      this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);\n      this.el = this.$el[0];\n    },\n\n    // Set callbacks, where `this.events` is a hash of\n    //\n    // *{\"event selector\": \"callback\"}*\n    //\n    //     {\n    //       'mousedown .title':  'edit',\n    //       'click .button':     'save',\n    //       'click .open':       function(e) { ... }\n    //     }\n    //\n    // pairs. Callbacks will be bound to the view, with `this` set properly.\n    // Uses event delegation for efficiency.\n    // Omitting the selector binds the event to `this.el`.\n    delegateEvents: function(events) {\n      events || (events = _.result(this, 'events'));\n      if (!events) return this;\n      this.undelegateEvents();\n      for (var key in events) {\n        var method = events[key];\n        if (!_.isFunction(method)) method = this[method];\n        if (!method) continue;\n        var match = key.match(delegateEventSplitter);\n        this.delegate(match[1], match[2], _.bind(method, this));\n      }\n      return this;\n    },\n\n    // Add a single event listener to the view's element (or a child element\n    // using `selector`). This only works for delegate-able events: not `focus`,\n    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.\n    delegate: function(eventName, selector, listener) {\n      this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);\n      return this;\n    },\n\n    // Clears all callbacks previously bound to the view by `delegateEvents`.\n    // You usually don't need to use this, but may wish to if you have multiple\n    // Backbone views attached to the same DOM element.\n    undelegateEvents: function() {\n      if (this.$el) this.$el.off('.delegateEvents' + this.cid);\n      return this;\n    },\n\n    // A finer-grained `undelegateEvents` for removing a single delegated event.\n    // `selector` and `listener` are both optional.\n    undelegate: function(eventName, selector, listener) {\n      this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);\n      return this;\n    },\n\n    // Produces a DOM element to be assigned to your view. Exposed for\n    // subclasses using an alternative DOM manipulation API.\n    _createElement: function(tagName) {\n      return document.createElement(tagName);\n    },\n\n    // Ensure that the View has a DOM element to render into.\n    // If `this.el` is a string, pass it through `$()`, take the first\n    // matching element, and re-assign it to `el`. Otherwise, create\n    // an element from the `id`, `className` and `tagName` properties.\n    _ensureElement: function() {\n      if (!this.el) {\n        var attrs = _.extend({}, _.result(this, 'attributes'));\n        if (this.id) attrs.id = _.result(this, 'id');\n        if (this.className) attrs['class'] = _.result(this, 'className');\n        this.setElement(this._createElement(_.result(this, 'tagName')));\n        this._setAttributes(attrs);\n      } else {\n        this.setElement(_.result(this, 'el'));\n      }\n    },\n\n    // Set attributes from a hash on this view's element.  Exposed for\n    // subclasses using an alternative DOM manipulation API.\n    _setAttributes: function(attributes) {\n      this.$el.attr(attributes);\n    }\n\n  });\n\n  // Backbone.sync\n  // -------------\n\n  // Override this function to change the manner in which Backbone persists\n  // models to the server. You will be passed the type of request, and the\n  // model in question. By default, makes a RESTful Ajax request\n  // to the model's `url()`. Some possible customizations could be:\n  //\n  // * Use `setTimeout` to batch rapid-fire updates into a single request.\n  // * Send up the models as XML instead of JSON.\n  // * Persist models via WebSockets instead of Ajax.\n  //\n  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests\n  // as `POST`, with a `_method` parameter containing the true HTTP method,\n  // as well as all requests with the body as `application/x-www-form-urlencoded`\n  // instead of `application/json` with the model in a param named `model`.\n  // Useful when interfacing with server-side languages like **PHP** that make\n  // it difficult to read the body of `PUT` requests.\n  Backbone.sync = function(method, model, options) {\n    var type = methodMap[method];\n\n    // Default options, unless specified.\n    _.defaults(options || (options = {}), {\n      emulateHTTP: Backbone.emulateHTTP,\n      emulateJSON: Backbone.emulateJSON\n    });\n\n    // Default JSON-request options.\n    var params = {type: type, dataType: 'json'};\n\n    // Ensure that we have a URL.\n    if (!options.url) {\n      params.url = _.result(model, 'url') || urlError();\n    }\n\n    // Ensure that we have the appropriate request data.\n    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\n      params.contentType = 'application/json';\n      params.data = JSON.stringify(options.attrs || model.toJSON(options));\n    }\n\n    // For older servers, emulate JSON by encoding the request into an HTML-form.\n    if (options.emulateJSON) {\n      params.contentType = 'application/x-www-form-urlencoded';\n      params.data = params.data ? {model: params.data} : {};\n    }\n\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\n    // And an `X-HTTP-Method-Override` header.\n    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\n      params.type = 'POST';\n      if (options.emulateJSON) params.data._method = type;\n      var beforeSend = options.beforeSend;\n      options.beforeSend = function(xhr) {\n        xhr.setRequestHeader('X-HTTP-Method-Override', type);\n        if (beforeSend) return beforeSend.apply(this, arguments);\n      };\n    }\n\n    // Don't process data on a non-GET request.\n    if (params.type !== 'GET' && !options.emulateJSON) {\n      params.processData = false;\n    }\n\n    // Pass along `textStatus` and `errorThrown` from jQuery.\n    var error = options.error;\n    options.error = function(xhr, textStatus, errorThrown) {\n      options.textStatus = textStatus;\n      options.errorThrown = errorThrown;\n      if (error) error.call(options.context, xhr, textStatus, errorThrown);\n    };\n\n    // Make the request, allowing the user to override any Ajax options.\n    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\n    model.trigger('request', model, xhr, options);\n    return xhr;\n  };\n\n  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\n  var methodMap = {\n    'create': 'POST',\n    'update': 'PUT',\n    'patch': 'PATCH',\n    'delete': 'DELETE',\n    'read': 'GET'\n  };\n\n  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.\n  // Override this if you'd like to use a different library.\n  Backbone.ajax = function() {\n    return Backbone.$.ajax.apply(Backbone.$, arguments);\n  };\n\n  // Backbone.Router\n  // ---------------\n\n  // Routers map faux-URLs to actions, and fire events when routes are\n  // matched. Creating a new one sets its `routes` hash, if not set statically.\n  var Router = Backbone.Router = function(options) {\n    options || (options = {});\n    if (options.routes) this.routes = options.routes;\n    this._bindRoutes();\n    this.initialize.apply(this, arguments);\n  };\n\n  // Cached regular expressions for matching named param parts and splatted\n  // parts of route strings.\n  var optionalParam = /\\((.*?)\\)/g;\n  var namedParam    = /(\\(\\?)?:\\w+/g;\n  var splatParam    = /\\*\\w+/g;\n  var escapeRegExp  = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\n\n  // Set up all inheritable **Backbone.Router** properties and methods.\n  _.extend(Router.prototype, Events, {\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // Manually bind a single named route to a callback. For example:\n    //\n    //     this.route('search/:query/p:num', 'search', function(query, num) {\n    //       ...\n    //     });\n    //\n    route: function(route, name, callback) {\n      if (!_.isRegExp(route)) route = this._routeToRegExp(route);\n      if (_.isFunction(name)) {\n        callback = name;\n        name = '';\n      }\n      if (!callback) callback = this[name];\n      var router = this;\n      Backbone.history.route(route, function(fragment) {\n        var args = router._extractParameters(route, fragment);\n        if (router.execute(callback, args, name) !== false) {\n          router.trigger.apply(router, ['route:' + name].concat(args));\n          router.trigger('route', name, args);\n          Backbone.history.trigger('route', router, name, args);\n        }\n      });\n      return this;\n    },\n\n    // Execute a route handler with the provided parameters.  This is an\n    // excellent place to do pre-route setup or post-route cleanup.\n    execute: function(callback, args, name) {\n      if (callback) callback.apply(this, args);\n    },\n\n    // Simple proxy to `Backbone.history` to save a fragment into the history.\n    navigate: function(fragment, options) {\n      Backbone.history.navigate(fragment, options);\n      return this;\n    },\n\n    // Bind all defined routes to `Backbone.history`. We have to reverse the\n    // order of the routes here to support behavior where the most general\n    // routes can be defined at the bottom of the route map.\n    _bindRoutes: function() {\n      if (!this.routes) return;\n      this.routes = _.result(this, 'routes');\n      var route, routes = _.keys(this.routes);\n      while ((route = routes.pop()) != null) {\n        this.route(route, this.routes[route]);\n      }\n    },\n\n    // Convert a route string into a regular expression, suitable for matching\n    // against the current location hash.\n    _routeToRegExp: function(route) {\n      route = route.replace(escapeRegExp, '\\\\$&')\n                   .replace(optionalParam, '(?:$1)?')\n                   .replace(namedParam, function(match, optional) {\n                     return optional ? match : '([^/?]+)';\n                   })\n                   .replace(splatParam, '([^?]*?)');\n      return new RegExp('^' + route + '(?:\\\\?([\\\\s\\\\S]*))?$');\n    },\n\n    // Given a route, and a URL fragment that it matches, return the array of\n    // extracted decoded parameters. Empty or unmatched parameters will be\n    // treated as `null` to normalize cross-browser behavior.\n    _extractParameters: function(route, fragment) {\n      var params = route.exec(fragment).slice(1);\n      return _.map(params, function(param, i) {\n        // Don't decode the search params.\n        if (i === params.length - 1) return param || null;\n        return param ? decodeURIComponent(param) : null;\n      });\n    }\n\n  });\n\n  // Backbone.History\n  // ----------------\n\n  // Handles cross-browser history management, based on either\n  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or\n  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)\n  // and URL fragments. If the browser supports neither (old IE, natch),\n  // falls back to polling.\n  var History = Backbone.History = function() {\n    this.handlers = [];\n    this.checkUrl = _.bind(this.checkUrl, this);\n\n    // Ensure that `History` can be used outside of the browser.\n    if (typeof window !== 'undefined') {\n      this.location = window.location;\n      this.history = window.history;\n    }\n  };\n\n  // Cached regex for stripping a leading hash/slash and trailing space.\n  var routeStripper = /^[#\\/]|\\s+$/g;\n\n  // Cached regex for stripping leading and trailing slashes.\n  var rootStripper = /^\\/+|\\/+$/g;\n\n  // Cached regex for stripping urls of hash.\n  var pathStripper = /#.*$/;\n\n  // Has the history handling already been started?\n  History.started = false;\n\n  // Set up all inheritable **Backbone.History** properties and methods.\n  _.extend(History.prototype, Events, {\n\n    // The default interval to poll for hash changes, if necessary, is\n    // twenty times a second.\n    interval: 50,\n\n    // Are we at the app root?\n    atRoot: function() {\n      var path = this.location.pathname.replace(/[^\\/]$/, '$&/');\n      return path === this.root && !this.getSearch();\n    },\n\n    // Does the pathname match the root?\n    matchRoot: function() {\n      var path = this.decodeFragment(this.location.pathname);\n      var rootPath = path.slice(0, this.root.length - 1) + '/';\n      return rootPath === this.root;\n    },\n\n    // Unicode characters in `location.pathname` are percent encoded so they're\n    // decoded for comparison. `%25` should not be decoded since it may be part\n    // of an encoded parameter.\n    decodeFragment: function(fragment) {\n      return decodeURI(fragment.replace(/%25/g, '%2525'));\n    },\n\n    // In IE6, the hash fragment and search params are incorrect if the\n    // fragment contains `?`.\n    getSearch: function() {\n      var match = this.location.href.replace(/#.*/, '').match(/\\?.+/);\n      return match ? match[0] : '';\n    },\n\n    // Gets the true hash value. Cannot use location.hash directly due to bug\n    // in Firefox where location.hash will always be decoded.\n    getHash: function(window) {\n      var match = (window || this).location.href.match(/#(.*)$/);\n      return match ? match[1] : '';\n    },\n\n    // Get the pathname and search params, without the root.\n    getPath: function() {\n      var path = this.decodeFragment(\n        this.location.pathname + this.getSearch()\n      ).slice(this.root.length - 1);\n      return path.charAt(0) === '/' ? path.slice(1) : path;\n    },\n\n    // Get the cross-browser normalized URL fragment from the path or hash.\n    getFragment: function(fragment) {\n      if (fragment == null) {\n        if (this._usePushState || !this._wantsHashChange) {\n          fragment = this.getPath();\n        } else {\n          fragment = this.getHash();\n        }\n      }\n      return fragment.replace(routeStripper, '');\n    },\n\n    // Start the hash change handling, returning `true` if the current URL matches\n    // an existing route, and `false` otherwise.\n    start: function(options) {\n      if (History.started) throw new Error('Backbone.history has already been started');\n      History.started = true;\n\n      // Figure out the initial configuration. Do we need an iframe?\n      // Is pushState desired ... is it available?\n      this.options          = _.extend({root: '/'}, this.options, options);\n      this.root             = this.options.root;\n      this._wantsHashChange = this.options.hashChange !== false;\n      this._hasHashChange   = 'onhashchange' in window && (document.documentMode === void 0 || document.documentMode > 7);\n      this._useHashChange   = this._wantsHashChange && this._hasHashChange;\n      this._wantsPushState  = !!this.options.pushState;\n      this._hasPushState    = !!(this.history && this.history.pushState);\n      this._usePushState    = this._wantsPushState && this._hasPushState;\n      this.fragment         = this.getFragment();\n\n      // Normalize root to always include a leading and trailing slash.\n      this.root = ('/' + this.root + '/').replace(rootStripper, '/');\n\n      // Transition from hashChange to pushState or vice versa if both are\n      // requested.\n      if (this._wantsHashChange && this._wantsPushState) {\n\n        // If we've started off with a route from a `pushState`-enabled\n        // browser, but we're currently in a browser that doesn't support it...\n        if (!this._hasPushState && !this.atRoot()) {\n          var rootPath = this.root.slice(0, -1) || '/';\n          this.location.replace(rootPath + '#' + this.getPath());\n          // Return immediately as browser will do redirect to new url\n          return true;\n\n        // Or if we've started out with a hash-based route, but we're currently\n        // in a browser where it could be `pushState`-based instead...\n        } else if (this._hasPushState && this.atRoot()) {\n          this.navigate(this.getHash(), {replace: true});\n        }\n\n      }\n\n      // Proxy an iframe to handle location events if the browser doesn't\n      // support the `hashchange` event, HTML5 history, or the user wants\n      // `hashChange` but not `pushState`.\n      if (!this._hasHashChange && this._wantsHashChange && !this._usePushState) {\n        this.iframe = document.createElement('iframe');\n        this.iframe.src = 'javascript:0';\n        this.iframe.style.display = 'none';\n        this.iframe.tabIndex = -1;\n        var body = document.body;\n        // Using `appendChild` will throw on IE < 9 if the document is not ready.\n        var iWindow = body.insertBefore(this.iframe, body.firstChild).contentWindow;\n        iWindow.document.open();\n        iWindow.document.close();\n        iWindow.location.hash = '#' + this.fragment;\n      }\n\n      // Add a cross-platform `addEventListener` shim for older browsers.\n      var addEventListener = window.addEventListener || function(eventName, listener) {\n        return attachEvent('on' + eventName, listener);\n      };\n\n      // Depending on whether we're using pushState or hashes, and whether\n      // 'onhashchange' is supported, determine how we check the URL state.\n      if (this._usePushState) {\n        addEventListener('popstate', this.checkUrl, false);\n      } else if (this._useHashChange && !this.iframe) {\n        addEventListener('hashchange', this.checkUrl, false);\n      } else if (this._wantsHashChange) {\n        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);\n      }\n\n      if (!this.options.silent) return this.loadUrl();\n    },\n\n    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,\n    // but possibly useful for unit testing Routers.\n    stop: function() {\n      // Add a cross-platform `removeEventListener` shim for older browsers.\n      var removeEventListener = window.removeEventListener || function(eventName, listener) {\n        return detachEvent('on' + eventName, listener);\n      };\n\n      // Remove window listeners.\n      if (this._usePushState) {\n        removeEventListener('popstate', this.checkUrl, false);\n      } else if (this._useHashChange && !this.iframe) {\n        removeEventListener('hashchange', this.checkUrl, false);\n      }\n\n      // Clean up the iframe if necessary.\n      if (this.iframe) {\n        document.body.removeChild(this.iframe);\n        this.iframe = null;\n      }\n\n      // Some environments will throw when clearing an undefined interval.\n      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);\n      History.started = false;\n    },\n\n    // Add a route to be tested when the fragment changes. Routes added later\n    // may override previous routes.\n    route: function(route, callback) {\n      this.handlers.unshift({route: route, callback: callback});\n    },\n\n    // Checks the current URL to see if it has changed, and if it has,\n    // calls `loadUrl`, normalizing across the hidden iframe.\n    checkUrl: function(e) {\n      var current = this.getFragment();\n\n      // If the user pressed the back button, the iframe's hash will have\n      // changed and we should use that for comparison.\n      if (current === this.fragment && this.iframe) {\n        current = this.getHash(this.iframe.contentWindow);\n      }\n\n      if (current === this.fragment) return false;\n      if (this.iframe) this.navigate(current);\n      this.loadUrl();\n    },\n\n    // Attempt to load the current URL fragment. If a route succeeds with a\n    // match, returns `true`. If no defined routes matches the fragment,\n    // returns `false`.\n    loadUrl: function(fragment) {\n      // If the root doesn't match, no routes can match either.\n      if (!this.matchRoot()) return false;\n      fragment = this.fragment = this.getFragment(fragment);\n      return _.some(this.handlers, function(handler) {\n        if (handler.route.test(fragment)) {\n          handler.callback(fragment);\n          return true;\n        }\n      });\n    },\n\n    // Save a fragment into the hash history, or replace the URL state if the\n    // 'replace' option is passed. You are responsible for properly URL-encoding\n    // the fragment in advance.\n    //\n    // The options object can contain `trigger: true` if you wish to have the\n    // route callback be fired (not usually desirable), or `replace: true`, if\n    // you wish to modify the current URL without adding an entry to the history.\n    navigate: function(fragment, options) {\n      if (!History.started) return false;\n      if (!options || options === true) options = {trigger: !!options};\n\n      // Normalize the fragment.\n      fragment = this.getFragment(fragment || '');\n\n      // Don't include a trailing slash on the root.\n      var rootPath = this.root;\n      if (fragment === '' || fragment.charAt(0) === '?') {\n        rootPath = rootPath.slice(0, -1) || '/';\n      }\n      var url = rootPath + fragment;\n\n      // Strip the hash and decode for matching.\n      fragment = this.decodeFragment(fragment.replace(pathStripper, ''));\n\n      if (this.fragment === fragment) return;\n      this.fragment = fragment;\n\n      // If pushState is available, we use it to set the fragment as a real URL.\n      if (this._usePushState) {\n        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);\n\n      // If hash changes haven't been explicitly disabled, update the hash\n      // fragment to store history.\n      } else if (this._wantsHashChange) {\n        this._updateHash(this.location, fragment, options.replace);\n        if (this.iframe && fragment !== this.getHash(this.iframe.contentWindow)) {\n          var iWindow = this.iframe.contentWindow;\n\n          // Opening and closing the iframe tricks IE7 and earlier to push a\n          // history entry on hash-tag change.  When replace is true, we don't\n          // want this.\n          if (!options.replace) {\n            iWindow.document.open();\n            iWindow.document.close();\n          }\n\n          this._updateHash(iWindow.location, fragment, options.replace);\n        }\n\n      // If you've told us that you explicitly don't want fallback hashchange-\n      // based history, then `navigate` becomes a page refresh.\n      } else {\n        return this.location.assign(url);\n      }\n      if (options.trigger) return this.loadUrl(fragment);\n    },\n\n    // Update the hash location, either replacing the current entry, or adding\n    // a new one to the browser history.\n    _updateHash: function(location, fragment, replace) {\n      if (replace) {\n        var href = location.href.replace(/(javascript:|#).*$/, '');\n        location.replace(href + '#' + fragment);\n      } else {\n        // Some browsers require that `hash` contains a leading #.\n        location.hash = '#' + fragment;\n      }\n    }\n\n  });\n\n  // Create the default Backbone.history.\n  Backbone.history = new History;\n\n  // Helpers\n  // -------\n\n  // Helper function to correctly set up the prototype chain for subclasses.\n  // Similar to `goog.inherits`, but uses a hash of prototype properties and\n  // class properties to be extended.\n  var extend = function(protoProps, staticProps) {\n    var parent = this;\n    var child;\n\n    // The constructor function for the new subclass is either defined by you\n    // (the \"constructor\" property in your `extend` definition), or defaulted\n    // by us to simply call the parent constructor.\n    if (protoProps && _.has(protoProps, 'constructor')) {\n      child = protoProps.constructor;\n    } else {\n      child = function(){ return parent.apply(this, arguments); };\n    }\n\n    // Add static properties to the constructor function, if supplied.\n    _.extend(child, parent, staticProps);\n\n    // Set the prototype chain to inherit from `parent`, without calling\n    // `parent`'s constructor function and add the prototype properties.\n    child.prototype = _.create(parent.prototype, protoProps);\n    child.prototype.constructor = child;\n\n    // Set a convenience property in case the parent's prototype is needed\n    // later.\n    child.__super__ = parent.prototype;\n\n    return child;\n  };\n\n  // Set up inheritance for the model, collection, router, view and history.\n  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;\n\n  // Throw an error when a URL is needed, and none is supplied.\n  var urlError = function() {\n    throw new Error('A \"url\" property or function must be specified');\n  };\n\n  // Wrap an optional error callback with a fallback error event.\n  var wrapError = function(model, options) {\n    var error = options.error;\n    options.error = function(resp) {\n      if (error) error.call(options.context, model, resp, options);\n      model.trigger('error', model, resp, options);\n    };\n  };\n\n  return Backbone;\n});\n"]}