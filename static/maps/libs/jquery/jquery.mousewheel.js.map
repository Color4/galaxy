{"version":3,"sources":["libs/jquery/jquery.mousewheel.js"],"names":["factory","$","handler","event","absDeltaXY","orgEvent","window","args","delta","deltaX","deltaY","absDelta","fix","wheelDelta","detail","undefined","wheelDeltaY","wheelDeltaX","Math","abs","lowestDelta","lowestDeltaXY","fn","unshift","this","toFix","toBind","document","documentMode","i","length","fixHooks","mouseHooks","special","mousewheel","setup","addEventListener","onmousewheel","teardown","removeEventListener","extend","bind","trigger","unmousewheel","unbind","jQuery"],"mappings":"cAYC,SAAUA,IAmBT,SAAUC,GA6CR,QAASC,GAAQC,GAAjB,GAOQC,GAPRC,EAAiBF,GAAOG,OAAAH,MAChBE,KAAAA,MAAWF,KAASG,UAAxB,GACIC,EAAO,EACPC,EAFJ,EAGIC,EAAS,EACTC,EAJJ,EAKIC,EALJ,CAiCA,OAjCAR,GAAAF,EAAAE,MAAAS,IAAAP,GAQAF,EAAAA,KAAUA,aAGVE,EAAAQ,aAAAL,EAAAH,EAAAQ,YACKR,EAASQ,SAAaL,GAAA,EAAAH,EAAAS,QACtBT,EAASS,SAAeN,GAAA,EAAQH,EAASS,OAAcN,EAAAE,GAE5DL,EAAAI,SACKJ,EAASK,EAASD,OACnBC,GAAkBA,EAATL,OAITU,KAAAN,EAASJ,cAATK,EAAAL,EAAAW,iBACAD,KAAAP,EAASC,cAATA,GAAA,EAAAJ,EAAAY,aAGJN,EAAAO,KAAAC,IAAAX,KACKH,GAASW,EAAgBD,KAAYK,EAAAT,GAAED,EAASL,KAAAA,IAASW,KAAAA,IAAAA,GAAlBE,KAAAC,IAAAV,MAAgCY,GAAAjB,EAAAiB,KAAAA,EAAAjB,GACKkB,EAAAd,EAAA,EAAA,QAAA,OAUjFA,EAASU,KAAKI,GAAId,EAAQY,GAR1BX,EAAAS,KAAAI,GAAAb,EAAAY,GACAV,EAAAA,KAAWO,GAAKC,EAAhBE,GACyEd,EAAAgB,QAAApB,EAAAK,EAAAC,EAAAC,IAEnEW,EAAAA,MAAAA,UAAiBjB,EAAAA,MAAaiB,QAAAA,MAAgBG,KAAAjB,GA/E1D,GAEMkB,GAASJ,EAFfI,GAAa,QAAA,aAAA,iBAAA,uBAGPC,EAAS,WAAaC,WAAYA,SAASC,cAAgB,GAAK,UAAY,aAAc,iBAAkB,sBAChH,IAAIR,EAAAA,MAAAA,SAGA,IAAM,GAAIS,GAAIJ,EAAMK,OAAQD,GADzB1B,EAAAA,MAAM4B,SAAWN,IAAAI,IAAA5B,EAAAE,MAAA6B,UAIvB/B,GAAAE,MAAA8B,QAAAC,YAGGC,MAAO,WADHF,GAAAA,KAAQC,iBACL,IAAA,GAAAL,GAAAH,EAAWI,OAAAD,GACTL,KAAKY,iBAAmBV,IAAAG,GAAA3B,GAAA,OAGxBsB,MAAAa,aAAAnC,GAIRoC,SATwB,WAYrB,GAAKd,KAAKe,oBADdD,IAAU,GAAAT,GAAAH,EAAAI,OAAWD,GACZL,KAAKe,oBAAsBb,IAAAG,GAAA3B,GAAA,OAG3BsB,MAAAa,aAAA,OAfgBpC,EAA7BqB,GAAAkB,QAuBIN,WAAY,SAASZ,GADpBkB,MAAOlB,GAAAE,KAAAiB,KAAA,aAAAnB,GAAAE,KAAAkB,QAAA,eAGPC,aAHO,SAAArB,GAMJ,MAAOE,MAAKoB,OAAO,aAActB,OAzDzCuB","file":"../../../scripts/libs/jquery/jquery.mousewheel.js","sourcesContent":["/*! Copyright (c) 2013 Brandon Aaron (http://brandonaaron.net)\n * Licensed under the MIT License (LICENSE.txt).\n *\n * Thanks to: http://adomas.org/javascript-mouse-wheel/ for some pointers.\n * Thanks to: Mathias Bank(http://www.mathias-bank.de) for a scope bug fix.\n * Thanks to: Seamus Leahy for adding deltaX and deltaY\n *\n * Version: 3.1.3\n *\n * Requires: 1.2.2+\n */\n\n(function (factory) {\n    // GALAXY HACK \n    // (JG): Galaxy's mixing of a global jQuery and require modules doesn't work with \n    // the logic below. Instead, do the right thing for this configuration without any checks.\n    factory(jQuery);\n    // END HACK\n\n    /*\n    if ( typeof define === 'function' && define.amd ) {\n        // AMD. Register as an anonymous module.\n        define(['jquery'], factory);\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS style for Browserify\n        module.exports = factory;\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n    */\n}(function ($) {\n\n    var toFix = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'];\n    var toBind = 'onwheel' in document || document.documentMode >= 9 ? ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'];\n    var lowestDelta, lowestDeltaXY;\n\n    if ( $.event.fixHooks ) {\n        for ( var i = toFix.length; i; ) {\n            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;\n        }\n    }\n\n    $.event.special.mousewheel = {\n        setup: function() {\n            if ( this.addEventListener ) {\n                for ( var i = toBind.length; i; ) {\n                    this.addEventListener( toBind[--i], handler, false );\n                }\n            } else {\n                this.onmousewheel = handler;\n            }\n        },\n\n        teardown: function() {\n            if ( this.removeEventListener ) {\n                for ( var i = toBind.length; i; ) {\n                    this.removeEventListener( toBind[--i], handler, false );\n                }\n            } else {\n                this.onmousewheel = null;\n            }\n        }\n    };\n\n    $.fn.extend({\n        mousewheel: function(fn) {\n            return fn ? this.bind(\"mousewheel\", fn) : this.trigger(\"mousewheel\");\n        },\n\n        unmousewheel: function(fn) {\n            return this.unbind(\"mousewheel\", fn);\n        }\n    });\n\n\n    function handler(event) {\n        var orgEvent = event || window.event,\n            args = [].slice.call(arguments, 1),\n            delta = 0,\n            deltaX = 0,\n            deltaY = 0,\n            absDelta = 0,\n            absDeltaXY = 0,\n            fn;\n        event = $.event.fix(orgEvent);\n        event.type = \"mousewheel\";\n\n        // Old school scrollwheel delta\n        if ( orgEvent.wheelDelta ) { delta = orgEvent.wheelDelta; }\n        if ( orgEvent.detail )     { delta = orgEvent.detail * -1; }\n\n        // New school wheel delta (wheel event)\n        if ( orgEvent.deltaY ) {\n            deltaY = orgEvent.deltaY * -1;\n            delta  = deltaY;\n        }\n        if ( orgEvent.deltaX ) {\n            deltaX = orgEvent.deltaX;\n            delta  = deltaX * -1;\n        }\n\n        // Webkit\n        if ( orgEvent.wheelDeltaY !== undefined ) { deltaY = orgEvent.wheelDeltaY; }\n        if ( orgEvent.wheelDeltaX !== undefined ) { deltaX = orgEvent.wheelDeltaX * -1; }\n\n        // Look for lowest delta to normalize the delta values\n        absDelta = Math.abs(delta);\n        if ( !lowestDelta || absDelta < lowestDelta ) { lowestDelta = absDelta; }\n        absDeltaXY = Math.max(Math.abs(deltaY), Math.abs(deltaX));\n        if ( !lowestDeltaXY || absDeltaXY < lowestDeltaXY ) { lowestDeltaXY = absDeltaXY; }\n\n        // Get a whole value for the deltas\n        fn = delta > 0 ? 'floor' : 'ceil';\n        delta  = Math[fn](delta / lowestDelta);\n        deltaX = Math[fn](deltaX / lowestDeltaXY);\n        deltaY = Math[fn](deltaY / lowestDeltaXY);\n\n        // Add event and delta to the front of the arguments\n        args.unshift(event, delta, deltaX, deltaY);\n\n        return ($.event.dispatch || $.event.handle).apply(this, args);\n    }\n\n}));\n"]}